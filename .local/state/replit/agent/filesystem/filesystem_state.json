{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# replit.md\n\n## Overview\n\nThis project is a real-time multiplayer snake game with integrated betting mechanics. Its core purpose is to provide an engaging and competitive gaming experience where players can customize snakes, manage virtual currency, interact with friends, and compete globally. The vision is to create a dynamic online arena for snake game enthusiasts, leveraging modern web technologies for a smooth and interactive user experience.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript.\n- **Routing**: Wouter (lightweight React router).\n- **Styling**: Tailwind CSS with shadcn/ui component library. Dark theme with neon color accents (yellow, green, blue). Responsive design.\n- **State Management**: React Context API.\n- **Data Fetching**: TanStack Query (React Query).\n- **Build Tool**: Vite.\n- **UI/UX Decisions**: Clean, minimal canvas-only display during gameplay with essential minimap and controls. Retro loading screen. Home screen snake appearance consistent with in-game. Proportional eye scaling for snakes.\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server.\n- **Language**: TypeScript.\n- **Real-time Communication**: WebSocket server for live game updates and server-authoritative game state.\n- **API Design**: RESTful endpoints.\n\n### Database Layer\n- **ORM**: Drizzle ORM for type-safe operations.\n- **Database**: PostgreSQL with persistent storage.\n- **Migrations**: Drizzle Kit.\n- **Schema**: Strongly typed with Zod validation and relations, including tables for users, games, gameParticipants, friendships, dailyCrates, and gameStates.\n\n### Core System Features\n- **Authentication**: Username/password based, user profile management.\n- **Game Engine**: Real-time multiplayer, WebSocket-based communication, **server-authoritative movement system**. **Server-Side Movement Authority**: Implemented server-controlled snake movement with 60 FPS game loop. Clients send input commands (direction, boost) while server calculates and broadcasts authoritative positions. Ensures snakes continue moving even when browser tabs are inactive or minimized. Snake growth completely capped at exactly 100 segments and 100 mass - no growth in size or strength beyond this limit. Dynamic segment spacing system where small snakes have tight segments (12px) that gradually spread out to 18px for larger snakes, creating natural elongated appearance. Money counter with consistent styling and positioning. Snake death results in full disappearance. Performance optimized for large snakes. Mass counter in top-right corner shows progress to 100 max. **Food System**: 160 optimized food particles evenly distributed across the entire map that smoothly gravitate toward players when within 50px range. Gentle linear gravitational attraction (0.147 force, 0.52 max speed) with smooth velocity transitions for natural movement. Food consumption increases snake mass for growth. Performance-optimized client-side food management with distance-based rendering. Food particles are worth 0.3 points each. **Boost Mechanic**: Sprinting drops small yellow food particles (0.025 mass each) every 16 frames while consuming 0.025 mass per drop, creating strategic risk-reward gameplay. **Sequential Room Filling System**: Games are hosted at `/snake/us/1`, `/snake/eu/1`, etc. with geographic server distribution. Each region (US/EU) starts with only room 1 available. Higher-numbered rooms (2, 3, etc.) only become available when all lower-numbered rooms reach full 8-player capacity. This ensures optimal player concentration and matchmaking. IP geolocation with timezone fallback for automatic region detection, plus manual region selection.\n- **Geographic Distribution**: Regional server architecture with US/EU region support. Client-side region detection using IP geolocation API (ipapi.co) with timezone fallback. Manual region override available via home page buttons. WebSocket connections include region parameters for proper routing.\n- **Social Features**: Friend system, global leaderboard, user statistics tracking.\n- **Virtual Economy**: Dual currency (game currency and SOL), daily crate rewards, betting mechanics, wallet management.\n- **Bot AI**: State-based AI (wander, avoid, aggro) with food targeting removed, strategic boosting, realistic movement patterns.\n- **Technical Implementations**: **Tab Switch Handling**: When player switches browser tabs, game instantly returns to home page and snake disappears completely. This prevents AFK gameplay and ensures active engagement. **Cash-Out Flow**: Completed cash-out instantly returns player to home page with snake disappearing completely. Dynamic turn speed for snakes when boosting. Visual effects include snake shadows and boosting outlines. Multiplayer WebSocket functionality working with real-time player updates and collision detection.\n\n## External Dependencies\n\n- **@neondatabase/serverless**: Serverless PostgreSQL connection.\n- **@radix-ui/*** Headless UI primitives.\n- **@tanstack/react-query**: Server state management and caching.\n- **drizzle-orm**: Type-safe ORM with PostgreSQL support.\n- **ws**: WebSocket library for real-time communication.\n- **zod**: Runtime type validation and schema definition.\n- **tailwindcss**: Utility-first CSS framework.","size_bytes":5381},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n\n\n\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2069},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport {\n  insertUserSchema,\n  insertGameSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n\n\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { username, password } = insertUserSchema.parse(req.body);\n      \n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n\n      const user = await storage.createUser({\n        username,\n        password, // In production, this should be hashed\n        balance: \"10.0000\", // Start with $10\n        solBalance: \"0.05000000\", // Start with some SOL\n        totalEarnings: \"0.00\",\n        gamesPlayed: 0,\n        kills: 0,\n        deaths: 0,\n        snakeColor: \"#00FF88\",\n        isOnline: false\n      });\n\n      res.json({ user: { ...user, password: undefined } });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid registration data\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = z.object({\n        username: z.string(),\n        password: z.string()\n      }).parse(req.body);\n\n      const user = await storage.getUserByUsername(username);\n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      await storage.updateUser(user.id, { isOnline: true });\n      res.json({ user: { ...user, password: undefined } });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid login data\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users/:id\", async (req, res) => {\n    const user = await storage.getUser(req.params.id);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n    res.json({ ...user, password: undefined });\n  });\n\n  app.post(\"/api/users/:id/update-balance\", async (req, res) => {\n    try {\n      const { amount } = z.object({ amount: z.number() }).parse(req.body);\n      const user = await storage.updateUserBalance(req.params.id, amount);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ ...user, password: undefined });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid amount\" });\n    }\n  });\n\n\n\n  // Game routes\n  app.get(\"/api/games/active\", async (req, res) => {\n    const games = await storage.getActiveGames();\n    res.json(games);\n  });\n\n  app.post(\"/api/games/create\", async (req, res) => {\n    try {\n      const gameData = insertGameSchema.parse(req.body);\n      const game = await storage.createGame(gameData);\n      res.json(game);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid game data\" });\n    }\n  });\n\n  app.post(\"/api/games/:gameId/join\", async (req, res) => {\n    try {\n      const { userId } = z.object({ userId: z.string() }).parse(req.body);\n      const game = await storage.getGame(req.params.gameId);\n      \n      if (!game) {\n        return res.status(404).json({ message: \"Game not found\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const betAmount = parseFloat(game.betAmount);\n      const userBalance = parseFloat(user.balance);\n\n      // For testing - give unlimited balance\n      if (userBalance < betAmount) {\n        // Auto-add funds for testing instead of rejecting\n        await storage.updateUserBalance(userId, betAmount * 10);\n      }\n\n      // Deduct bet amount\n      await storage.updateUserBalance(userId, -betAmount);\n      \n      // Join game\n      const participant = await storage.joinGame(game.id, userId);\n      \n      // Update game player count\n      const participants = await storage.getGameParticipants(game.id);\n      await storage.updateGame(game.id, { playersCount: participants.length });\n\n      res.json(participant);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to join game\" });\n    }\n  });\n\n\n\n  // Daily crate route\n  app.post(\"/api/users/:id/claim-daily-crate\", async (req, res) => {\n    const lastCrate = await storage.getLastDailyCrate(req.params.id);\n    const now = new Date();\n    const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n\n    if (lastCrate && lastCrate.claimedAt > yesterday) {\n      return res.status(400).json({ message: \"Daily crate already claimed today\" });\n    }\n\n    const reward = Math.random() * 5 + 0.5; // Random reward between $0.50 and $5.50\n    const crate = await storage.claimDailyCrate(req.params.id, reward);\n    await storage.updateUserBalance(req.params.id, reward);\n\n    res.json(crate);\n  });\n\n  // WebSocket handling now managed by NewGameServer\n\n  // Simple health check for multiplayer\n  app.get(\"/api/multiplayer/status\", (req, res) => {\n    res.json({ \n      status: 'active',\n      timestamp: Date.now()\n    });\n  });\n\n  // Room management system with regional support\n  interface GameRoom {\n    id: number;\n    region: string;\n    players: Map<string, any>;\n    bots: any[];\n    maxPlayers: number;\n    initialized: boolean;\n    lastActivity: number;\n  }\n\n  const gameRooms = new Map<string, GameRoom>(); // Key format: \"region:roomId\"\n  const playerToRoom = new Map<string, string>(); // Maps playerId to \"region:roomId\"\n\n  // Initialize room with region support\n  function createRoom(region: string, roomId: number): GameRoom {\n    const room: GameRoom = {\n      id: roomId,\n      region: region,\n      players: new Map(),\n      bots: [],\n      maxPlayers: 8,\n      initialized: true,\n      lastActivity: Date.now()\n    };\n    const roomKey = `${region}:${roomId}`;\n    gameRooms.set(roomKey, room);\n    console.log(`Created room ${region}/${roomId}`);\n    return room;\n  }\n\n  // Find best available room in specified region (sequential filling - only create higher rooms when lower ones are full)\n  function findBestRoom(region: string = 'us'): GameRoom {\n    // Get rooms for this region only, sorted by room ID\n    const regionRooms = Array.from(gameRooms.entries())\n      .filter(([key, room]) => room.region === region)\n      .sort((a, b) => a[1].id - b[1].id); // Sort by room ID\n    \n    // Always try to fill the lowest numbered room first\n    for (const [roomKey, room] of regionRooms) {\n      if (room.players.size < room.maxPlayers) {\n        console.log(`Found available space in room ${region}/${room.id} (${room.players.size}/${room.maxPlayers})`);\n        return room;\n      }\n    }\n    \n    // Only create a new room if ALL existing rooms are completely full\n    const newRoomId = regionRooms.length + 1;\n    console.log(`All ${region} rooms (${regionRooms.length}) are full, creating new room ${region}/${newRoomId}`);\n    return createRoom(region, newRoomId);\n  }\n\n  // API endpoint to get best available room with region support\n  app.get(\"/api/room/join\", (req, res) => {\n    const region = (req.query.region as string) || 'us';\n    \n    // Validate region\n    if (region !== 'us' && region !== 'eu') {\n      return res.status(400).json({ error: 'Invalid region. Must be \"us\" or \"eu\"' });\n    }\n    \n    const room = findBestRoom(region);\n    res.json({ \n      roomId: room.id,\n      region: room.region,\n      currentPlayers: room.players.size,\n      maxPlayers: room.maxPlayers\n    });\n  });\n\n  // WebSocket server for multiplayer on /ws path\n  const wss = new WebSocketServer({ \n    server: httpServer,\n    path: '/ws'\n  });\n\n  // Create initial rooms for both regions if none exist\n  if (gameRooms.size === 0) {\n    createRoom('us', 1);\n    createRoom('eu', 1);\n  }\n\n  wss.on(\"connection\", function connection(ws: any, req: any) {\n    const playerId = `player_${Date.now()}_${Math.random()}`;\n    console.log(`Player ${playerId} attempting to join. Total WebSocket connections: ${wss.clients.size}`);\n    \n    // Extract room ID and region from query parameters\n    const url = new URL(req.url, `http://${req.headers.host}`);\n    const requestedRoomId = parseInt(url.searchParams.get('room') || '1');\n    const requestedRegion = url.searchParams.get('region') || 'us';\n    \n    // Validate region\n    if (requestedRegion !== 'us' && requestedRegion !== 'eu') {\n      ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Invalid region'\n      }));\n      ws.close();\n      return;\n    }\n    \n    // Always find the best available room (ignore requested room ID for sequential filling)\n    let targetRoom = findBestRoom(requestedRegion);\n    \n    // Check if room is full\n    if (targetRoom.players.size >= targetRoom.maxPlayers) {\n      ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Room is full'\n      }));\n      ws.close();\n      return;\n    }\n    \n    (ws as any).playerId = playerId;\n    (ws as any).roomId = targetRoom.id;\n    (ws as any).region = targetRoom.region;\n    const finalRoomKey = `${targetRoom.region}:${targetRoom.id}`;\n    playerToRoom.set(playerId, finalRoomKey);\n    \n    console.log(`Player ${playerId} joined room ${targetRoom.region}/${targetRoom.id}. Room players: ${targetRoom.players.size + 1}/${targetRoom.maxPlayers}`);\n    console.log(`WebSocket readyState: ${ws.readyState}`);\n    \n    // Assign different colors to different players\n    const colors = ['#d55400', '#4ecdc4', '#ff6b6b', '#45b7d1', '#96ceb4', '#feca57', '#ff9ff3', '#54a0ff'];\n    const playerColor = colors[targetRoom.players.size % colors.length];\n    \n    const player = {\n      id: playerId,\n      segments: [],\n      color: playerColor,\n      money: 1.00,\n      lastUpdate: Date.now(),\n      roomId: targetRoom.id\n    };\n    \n    // Add player to room\n    targetRoom.players.set(playerId, player);\n    targetRoom.lastActivity = Date.now();\n\n    // Send welcome message with player ID, room, and region info\n    ws.send(JSON.stringify({\n      type: 'welcome',\n      playerId: playerId,\n      roomId: targetRoom.id,\n      region: targetRoom.region,\n      currentPlayers: targetRoom.players.size,\n      maxPlayers: targetRoom.maxPlayers\n    }));\n    \n    // Send current players to new player\n    setTimeout(() => {\n      ws.send(JSON.stringify({\n        type: 'players',\n        players: Array.from(targetRoom.players.values())\n      }));\n      \n      // Send shared game world state including all players in this room\n      ws.send(JSON.stringify({\n        type: 'gameWorld',\n        bots: targetRoom.bots,\n        players: Array.from(targetRoom.players.values())\n      }));\n    }, 100);\n\n    ws.on(\"message\", function incoming(message: any) {\n      try {\n        const data = JSON.parse(message.toString());\n        if (data.type === 'update') {\n          // Get player's room\n          const roomKey = playerToRoom.get(playerId);\n          const room = gameRooms.get(roomKey!);\n          if (!room) return;\n          \n          // Update player data in room\n          const existingPlayer = room.players.get(playerId);\n          // Enforce 100-segment and 100-mass limits on server side\n          const MAX_SEGMENTS = 100;\n          const MAX_MASS = 100;\n          const segments = data.segments || [];\n          const limitedSegments = segments.length > MAX_SEGMENTS ? segments.slice(0, MAX_SEGMENTS) : segments;\n          const limitedMass = Math.min(data.totalMass || 6, MAX_MASS); // Cap mass at 100\n          \n          const updatedPlayer = {\n            id: playerId,\n            segments: limitedSegments,\n            color: existingPlayer?.color || '#d55400',\n            money: data.money || 1.00,\n            totalMass: limitedMass, // Cap mass at 100\n            segmentRadius: data.segmentRadius || 8,\n            visibleSegmentCount: Math.min(data.visibleSegmentCount || 0, MAX_SEGMENTS),\n            lastUpdate: Date.now(),\n            roomId: room.id\n          };\n          console.log(`Room ${room.region}/${room.id}: Server received update from ${playerId}: ${limitedSegments.length} segments (was ${segments.length}), mass: ${limitedMass.toFixed(1)} (was ${data.totalMass?.toFixed(1)}), radius: ${data.segmentRadius?.toFixed(1) || 'unknown'}`);\n          \n          // Check for collisions with other players BEFORE updating position\n          const currentPlayerHead = data.segments && data.segments.length > 0 ? data.segments[0] : null;\n          if (currentPlayerHead && data.segmentRadius) {\n            let collisionDetected = false;\n            \n            // Check collision with all other players in same room\n            for (const [otherPlayerId, otherPlayer] of Array.from(room.players)) {\n              if (otherPlayerId === playerId) continue; // Skip self\n              if (!otherPlayer.segments || otherPlayer.segments.length === 0) continue;\n              \n              // Check collision with all segments of other player\n              for (const segment of otherPlayer.segments) {\n                const dist = Math.sqrt(\n                  (currentPlayerHead.x - segment.x) ** 2 + \n                  (currentPlayerHead.y - segment.y) ** 2\n                );\n                const collisionRadius = data.segmentRadius + (otherPlayer.segmentRadius || 10);\n                \n                if (dist < collisionRadius) {\n                  console.log(`💀 SERVER Room ${room.region}/${room.id}: Player ${playerId} crashed into ${otherPlayerId}!`);\n                  collisionDetected = true;\n                  \n                  // Get crashed player data for money crate calculation\n                  const crashedPlayer = room.players.get(playerId);\n                  const crashedPlayerMoney = crashedPlayer?.money || 1.0;\n                  const crashedPlayerMass = crashedPlayer?.totalMass || 6;\n                  \n                  // Create money crates (1 crate per mass unit) at player's death location\n                  const numCrates = Math.floor(crashedPlayerMass) || 1; // At least 1 crate\n                  const moneyPerCrate = crashedPlayerMoney / numCrates;\n                  \n                  console.log(`💰 SERVER: Creating ${numCrates} money crates worth $${moneyPerCrate.toFixed(2)} each at death location`);\n                  \n                  // Drop money crates in a spread pattern around death location\n                  for (let i = 0; i < numCrates; i++) {\n                    const angle = (i / numCrates) * Math.PI * 2;\n                    const spreadRadius = 20 + (i * 8); // Spread crates in expanding circle\n                    const crateX = currentPlayerHead.x + Math.cos(angle) * spreadRadius;\n                    const crateY = currentPlayerHead.y + Math.sin(angle) * spreadRadius;\n                    \n                    const moneyCrate = {\n                      id: `money_crate_${Date.now()}_${i}`,\n                      x: crateX,\n                      y: crateY,\n                      radius: 6,\n                      mass: 0,\n                      color: '#ffd700',\n                      vx: 0,\n                      vy: 0,\n                      wobbleOffset: Math.random() * Math.PI * 2,\n                      isMoneyCrate: true,\n                      moneyValue: parseFloat(moneyPerCrate.toFixed(2))\n                    };\n                    \n                    // Broadcast money crate to all players in the room\n                    const crateMessage = JSON.stringify({\n                      type: 'moneyCrate',\n                      playerId: playerId,\n                      crate: moneyCrate\n                    });\n                    \n                    let broadcastCount = 0;\n                    room.players.forEach((player, id) => {\n                      wss.clients.forEach(client => {\n                        if ((client as any).playerId === id && client.readyState === WebSocket.OPEN) {\n                          client.send(crateMessage);\n                          broadcastCount++;\n                        }\n                      });\n                    });\n                    \n                    console.log(`💰 Player ${playerId} dropped money crate in room ${room.region}/${room.id}: ${JSON.stringify(moneyCrate)}`);\n                  }\n                  \n                  // Remove crashed player from room\n                  room.players.delete(playerId);\n                  playerToRoom.delete(playerId);\n                  \n                  // Send death notification to crashed player\n                  if (ws.readyState === WebSocket.OPEN) {\n                    ws.send(JSON.stringify({\n                      type: 'death',\n                      reason: 'collision',\n                      crashedInto: otherPlayerId\n                    }));\n                  }\n                  \n                  console.log(`💀 Player ${playerId} removed from room ${room.region}/${room.id}`);\n                  break;\n                }\n              }\n              if (collisionDetected) break;\n            }\n            \n            // Only update player if no collision detected\n            if (!collisionDetected) {\n              room.players.set(playerId, updatedPlayer);\n              room.lastActivity = Date.now();\n            }\n          } else {\n            // No collision check needed if no head position\n            room.players.set(playerId, updatedPlayer);\n            room.lastActivity = Date.now();\n          }\n        } else if (data.type === 'boostFood') {\n          // Handle boost food drops - broadcast to all players in room\n          const roomKey = playerToRoom.get(playerId);\n          const room = gameRooms.get(roomKey!);\n          if (!room) return;\n          \n          console.log(`🍕 Player ${playerId} dropped boost food in room ${room.region}/${room.id}:`, data.food);\n          \n          // Broadcast boost food to all other players in room\n          const boostFoodMessage = JSON.stringify({\n            type: 'boostFood',\n            food: data.food,\n            playerId: playerId\n          });\n          \n          let broadcastCount = 0;\n          wss.clients.forEach(client => {\n            if (client.readyState === WebSocket.OPEN && \n                client.roomId === room.id && \n                client.region === room.region &&\n                client.playerId !== playerId) { // Don't send back to the sender\n              try {\n                client.send(boostFoodMessage);\n                broadcastCount++;\n              } catch (error) {\n                console.error(`Error broadcasting boost food to room ${room.region}/${room.id}:`, error);\n              }\n            }\n          });\n          \n          console.log(`🍕 Boost food broadcast to ${broadcastCount} players in room ${room.region}/${room.id}`);\n        } else if (data.type === 'moneyCrate') {\n          // Handle money crate drops - broadcast to all players in room\n          const roomKey = playerToRoom.get(playerId);\n          const room = gameRooms.get(roomKey!);\n          if (!room) return;\n          \n          console.log(`💰 Player ${playerId} dropped money crate in room ${room.region}/${room.id}:`, data.crate);\n          \n          // Broadcast money crate to all other players in room\n          const moneyCrateMessage = JSON.stringify({\n            type: 'moneyCrate',\n            crate: data.crate,\n            playerId: playerId\n          });\n          \n          let broadcastCount = 0;\n          wss.clients.forEach((client: any) => {\n            if (client.readyState === WebSocket.OPEN && \n                client.roomId === room.id && \n                client.region === room.region &&\n                client.playerId !== playerId) { // Don't send back to the sender\n              try {\n                client.send(moneyCrateMessage);\n                broadcastCount++;\n              } catch (error) {\n                console.error(`Error broadcasting money crate to room ${room.region}/${room.id}:`, error);\n              }\n            }\n          });\n          \n          console.log(`💰 Money crate broadcast to ${broadcastCount} players in room ${room.region}/${room.id}`);\n        } else if (data.type === 'moneyCrateCollected') {\n          // Handle money crate collection - broadcast removal to all players\n          const roomKey = playerToRoom.get(playerId);\n          const room = gameRooms.get(roomKey!);\n          if (!room) return;\n          \n          console.log(`💰 Player ${playerId} collected money crate ${data.crateId} in room ${room.region}/${room.id}`);\n          \n          // Broadcast crate removal to all players in room\n          const crateRemovalMessage = JSON.stringify({\n            type: 'moneyCrateRemoved',\n            crateId: data.crateId,\n            collectedBy: playerId\n          });\n          \n          let broadcastCount = 0;\n          wss.clients.forEach((client: any) => {\n            if (client.readyState === WebSocket.OPEN && \n                client.roomId === room.id && \n                client.region === room.region) {\n              try {\n                client.send(crateRemovalMessage);\n                broadcastCount++;\n              } catch (error) {\n                console.error(`Error broadcasting crate removal to room ${room.region}/${room.id}:`, error);\n              }\n            }\n          });\n          \n          console.log(`💰 Money crate removal broadcast to ${broadcastCount} players in room ${room.region}/${room.id}`);\n        } // Food system completely removed from multiplayer\n      } catch (error) {\n        console.error(\"WebSocket message error:\", error);\n      }\n    });\n\n    ws.on(\"close\", (code: number, reason: Buffer) => {\n      const roomKey = playerToRoom.get(playerId);\n      const room = gameRooms.get(roomKey!);\n      console.log(`Player ${playerId} left room ${roomKey}. Code: ${code}, Reason: ${reason.toString()}`);\n      \n      if (room) {\n        room.players.delete(playerId);\n        console.log(`Room ${room.region}/${room.id} now has ${room.players.size}/${room.maxPlayers} players`);\n      }\n      playerToRoom.delete(playerId);\n    });\n\n    ws.on(\"error\", (error: any) => {\n      const roomKey = playerToRoom.get(playerId);\n      const room = gameRooms.get(roomKey!);\n      console.error(`WebSocket error for player ${playerId} in room ${roomKey}:`, error);\n      \n      if (room) {\n        room.players.delete(playerId);\n      }\n      playerToRoom.delete(playerId);\n    });\n  });\n\n  // Broadcast game state every 50ms for much smoother multiplayer\n  setInterval(() => {\n    if (wss.clients.size > 0) {\n      // Broadcast to each room separately\n      for (const [roomKey, room] of gameRooms) {\n        if (room.players.size === 0) continue;\n        \n        const worldMessage = JSON.stringify({\n          type: 'gameWorld',\n          bots: room.bots,\n          players: Array.from(room.players.values()),\n          roomId: room.id,\n          region: room.region\n        });\n        \n        // Find clients in this room and broadcast to them\n        wss.clients.forEach(client => {\n          if (client.readyState === WebSocket.OPEN && \n              (client as any).roomId === room.id && \n              (client as any).region === room.region) {\n            try {\n              client.send(worldMessage);\n            } catch (error) {\n              console.error(`Broadcast error to room ${room.region}/${room.id}:`, error);\n              client.terminate();\n            }\n          }\n        });\n      }\n    }\n  }, 50); // Much faster server broadcasts for smoother multiplayer\n\n  return httpServer;\n}","size_bytes":23626},"server/storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type Game,\n  type InsertGame,\n  type GameParticipant,\n  type InsertGameParticipant,\n  type DailyCrate,\n  type InsertDailyCrate,\n  type GameState,\n  type Player,\n  type Direction,\n  users,\n  games,\n  gameParticipants,\n  dailyCrates,\n  gameStates\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  updateUserBalance(id: string, amount: number): Promise<User | undefined>;\n\n  // Game operations\n  createGame(game: InsertGame): Promise<Game>;\n  getGame(id: string): Promise<Game | undefined>;\n  getActiveGames(): Promise<Game[]>;\n  updateGame(id: string, updates: Partial<Game>): Promise<Game | undefined>;\n  joinGame(gameId: string, userId: string): Promise<GameParticipant>;\n  getGameParticipants(gameId: string): Promise<GameParticipant[]>;\n  updateGameParticipant(id: string, updates: Partial<GameParticipant>): Promise<GameParticipant | undefined>;\n\n\n\n  // Daily crate operations\n  getLastDailyCrate(userId: string): Promise<DailyCrate | undefined>;\n  claimDailyCrate(userId: string, reward: number): Promise<DailyCrate>;\n\n  // Game state operations\n  getGameState(gameId: string): Promise<GameState | undefined>;\n  updateGameState(gameId: string, state: GameState): Promise<void>;\n  removeGameState(gameId: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const [newUser] = await db\n      .insert(users)\n      .values(user)\n      .returning();\n    return newUser;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [updatedUser] = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser || undefined;\n  }\n\n  async updateUserBalance(id: string, amount: number): Promise<User | undefined> {\n    const user = await this.getUser(id);\n    if (!user) return undefined;\n    \n    const currentBalance = parseFloat(user.balance);\n    const newBalance = currentBalance + amount;\n    \n    return this.updateUser(id, { balance: newBalance.toFixed(4) });\n  }\n\n\n\n  // Game operations\n  async createGame(game: InsertGame): Promise<Game> {\n    const [newGame] = await db\n      .insert(games)\n      .values(game)\n      .returning();\n    return newGame;\n  }\n\n  async getGame(id: string): Promise<Game | undefined> {\n    const [game] = await db.select().from(games).where(eq(games.id, id));\n    return game || undefined;\n  }\n\n  async getActiveGames(): Promise<Game[]> {\n    return await db\n      .select()\n      .from(games)\n      .where(or(eq(games.status, 'waiting'), eq(games.status, 'active')));\n  }\n\n  async updateGame(id: string, updates: Partial<Game>): Promise<Game | undefined> {\n    const [updatedGame] = await db\n      .update(games)\n      .set(updates)\n      .where(eq(games.id, id))\n      .returning();\n    return updatedGame || undefined;\n  }\n\n  async joinGame(gameId: string, userId: string): Promise<GameParticipant> {\n    const [participant] = await db\n      .insert(gameParticipants)\n      .values({\n        gameId,\n        userId,\n        kills: 0,\n        earnings: \"0.00\",\n        isAlive: true\n      })\n      .returning();\n    return participant;\n  }\n\n  async getGameParticipants(gameId: string): Promise<GameParticipant[]> {\n    return await db\n      .select()\n      .from(gameParticipants)\n      .where(eq(gameParticipants.gameId, gameId));\n  }\n\n  async updateGameParticipant(id: string, updates: Partial<GameParticipant>): Promise<GameParticipant | undefined> {\n    const [updatedParticipant] = await db\n      .update(gameParticipants)\n      .set(updates)\n      .where(eq(gameParticipants.id, id))\n      .returning();\n    return updatedParticipant || undefined;\n  }\n\n\n\n  // Daily crate operations\n  async getLastDailyCrate(userId: string): Promise<DailyCrate | undefined> {\n    const [crate] = await db\n      .select()\n      .from(dailyCrates)\n      .where(eq(dailyCrates.userId, userId))\n      .orderBy(desc(dailyCrates.claimedAt))\n      .limit(1);\n    return crate || undefined;\n  }\n\n  async claimDailyCrate(userId: string, reward: number): Promise<DailyCrate> {\n    const [crate] = await db\n      .insert(dailyCrates)\n      .values({\n        userId,\n        reward: reward.toFixed(4)\n      })\n      .returning();\n    return crate;\n  }\n\n  // Game state operations\n  async getGameState(gameId: string): Promise<GameState | undefined> {\n    const [state] = await db\n      .select()\n      .from(gameStates)\n      .where(eq(gameStates.id, gameId));\n    \n    if (state) {\n      return state.data as GameState;\n    }\n\n    // Create initial game state if it doesn't exist\n    const game = await this.getGame(gameId);\n    if (!game) return undefined;\n\n    const participants = await this.getGameParticipants(gameId);\n    const users = await Promise.all(\n      participants.map(p => this.getUser(p.userId))\n    );\n\n    const players = participants.map((participant, index) => ({\n      id: participant.userId,\n      username: users[index]?.username || 'Unknown',\n      color: this.getRandomColor(),\n      kills: participant.kills,\n      earnings: parseFloat(participant.earnings),\n      isAlive: participant.isAlive,\n      snake: {\n        segments: [{ x: 500 + Math.random() * 500, y: 500 + Math.random() * 500 }],\n        direction: 'right' as Direction,\n        angle: Math.random() * Math.PI * 2,\n        speed: 2,\n        growing: false\n      }\n    }));\n\n    const initialGameState: GameState = {\n      id: gameId,\n      players,\n      food: this.generateFood(20),\n      gameArea: { width: 4000, height: 4000 },\n      status: 'active',\n      betAmount: parseFloat(game.betAmount)\n    };\n\n    await this.updateGameState(gameId, initialGameState);\n    return initialGameState;\n  }\n\n  private getRandomColor(): string {\n    const colors = ['#FFD700', '#32CD32', '#1E90FF', '#FF69B4', '#FF4500', '#9370DB', '#00CED1'];\n    return colors[Math.floor(Math.random() * colors.length)];\n  }\n\n  private generateFood(count: number): any[] {\n    const food = [];\n    for (let i = 0; i < count; i++) {\n      food.push({\n        id: `food_${i}`,\n        position: {\n          x: Math.random() * 2000,\n          y: Math.random() * 2000\n        },\n        value: Math.floor(Math.random() * 3) + 1,\n        color: this.getRandomColor()\n      });\n    }\n    return food;\n  }\n\n  async updateGameState(gameId: string, state: GameState): Promise<void> {\n    await db\n      .insert(gameStates)\n      .values({\n        id: gameId,\n        data: state as any\n      })\n      .onConflictDoUpdate({\n        target: gameStates.id,\n        set: {\n          data: state as any,\n          lastUpdated: new Date()\n        }\n      });\n  }\n\n  async removeGameState(gameId: string): Promise<void> {\n    await db.delete(gameStates).where(eq(gameStates.id, gameId));\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":7554},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, uuid, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  balance: decimal(\"balance\", { precision: 10, scale: 4 }).default(\"0.0000\").notNull(),\n  solBalance: decimal(\"sol_balance\", { precision: 10, scale: 8 }).default(\"0.00000000\").notNull(),\n  totalEarnings: decimal(\"total_earnings\", { precision: 10, scale: 2 }).default(\"0.00\").notNull(),\n  gamesPlayed: integer(\"games_played\").default(0).notNull(),\n  kills: integer(\"kills\").default(0).notNull(),\n  deaths: integer(\"deaths\").default(0).notNull(),\n  snakeColor: text(\"snake_color\").default(\"#00FF88\").notNull(),\n  isOnline: boolean(\"is_online\").default(false).notNull(),\n  lastActive: timestamp(\"last_active\").default(sql`now()`).notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`).notNull()\n});\n\nexport const games = pgTable(\"games\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  region: text(\"region\").notNull(),\n  betAmount: decimal(\"bet_amount\", { precision: 10, scale: 2 }).notNull(),\n  playersCount: integer(\"players_count\").default(0).notNull(),\n  maxPlayers: integer(\"max_players\").default(20).notNull(),\n  status: text(\"status\").notNull(), // 'waiting', 'active', 'finished'\n  createdAt: timestamp(\"created_at\").default(sql`now()`).notNull(),\n  startedAt: timestamp(\"started_at\"),\n  endedAt: timestamp(\"ended_at\")\n});\n\nexport const gameParticipants = pgTable(\"game_participants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  gameId: varchar(\"game_id\").notNull().references(() => games.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  kills: integer(\"kills\").default(0).notNull(),\n  earnings: decimal(\"earnings\", { precision: 10, scale: 2 }).default(\"0.00\").notNull(),\n  isAlive: boolean(\"is_alive\").default(true).notNull(),\n  joinedAt: timestamp(\"joined_at\").default(sql`now()`).notNull(),\n  eliminatedAt: timestamp(\"eliminated_at\")\n});\n\n\n\nexport const dailyCrates = pgTable(\"daily_crates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  claimedAt: timestamp(\"claimed_at\").default(sql`now()`).notNull(),\n  reward: decimal(\"reward\", { precision: 10, scale: 4 }).notNull()\n});\n\n// Game states table for storing real-time game data\nexport const gameStates = pgTable(\"game_states\", {\n  id: varchar(\"id\").primaryKey(), // matches game id\n  data: jsonb(\"data\").notNull(), // stores full GameState object\n  lastUpdated: timestamp(\"last_updated\").default(sql`now()`).notNull()\n});\n\n// Define relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  gameParticipants: many(gameParticipants),\n  dailyCrates: many(dailyCrates)\n}));\n\nexport const gamesRelations = relations(games, ({ many, one }) => ({\n  participants: many(gameParticipants),\n  gameState: one(gameStates, {\n    fields: [games.id],\n    references: [gameStates.id]\n  })\n}));\n\nexport const gameParticipantsRelations = relations(gameParticipants, ({ one }) => ({\n  user: one(users, {\n    fields: [gameParticipants.userId],\n    references: [users.id]\n  }),\n  game: one(games, {\n    fields: [gameParticipants.gameId],\n    references: [games.id]\n  })\n}));\n\n\n\nexport const dailyCratesRelations = relations(dailyCrates, ({ one }) => ({\n  user: one(users, {\n    fields: [dailyCrates.userId],\n    references: [users.id]\n  })\n}));\n\nexport const gameStatesRelations = relations(gameStates, ({ one }) => ({\n  game: one(games, {\n    fields: [gameStates.id],\n    references: [games.id]\n  })\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  lastActive: true\n});\n\nexport const insertGameSchema = createInsertSchema(games).omit({\n  id: true,\n  createdAt: true,\n  startedAt: true,\n  endedAt: true\n});\n\nexport const insertGameParticipantSchema = createInsertSchema(gameParticipants).omit({\n  id: true,\n  joinedAt: true,\n  eliminatedAt: true\n});\n\n\n\nexport const insertDailyCrateSchema = createInsertSchema(dailyCrates).omit({\n  id: true,\n  claimedAt: true\n});\n\nexport const insertGameStateSchema = createInsertSchema(gameStates).omit({\n  lastUpdated: true\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertGame = z.infer<typeof insertGameSchema>;\nexport type Game = typeof games.$inferSelect;\n\nexport type InsertGameParticipant = z.infer<typeof insertGameParticipantSchema>;\nexport type GameParticipant = typeof gameParticipants.$inferSelect;\n\n\n\nexport type InsertDailyCrate = z.infer<typeof insertDailyCrateSchema>;\nexport type DailyCrate = typeof dailyCrates.$inferSelect;\n\n// Game state types\nexport interface GameState {\n  id: string;\n  players: Player[];\n  food: Food[];\n  gameArea: { width: number; height: number };\n  status: 'waiting' | 'active' | 'finished';\n  betAmount: number;\n}\n\nexport interface Player {\n  id: string;\n  username: string;\n  snake: Snake;\n  kills: number;\n  earnings: number;\n  isAlive: boolean;\n  color: string;\n}\n\n\n","size_bytes":5405},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/auth-context\";\nimport { GameProvider } from \"@/contexts/game-context\";\nimport Home from \"@/pages/home\";\nimport Game from \"@/pages/game\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/game\" component={Game} />\n      <Route path=\"/snake/:region/:roomId\" component={Game} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <GameProvider>\n            <Toaster />\n            <Router />\n          </GameProvider>\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1059},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Retro gaming font */\n.font-retro {\n  font-family: 'Press Start 2P', monospace;\n  font-weight: 400;\n  -webkit-font-smoothing: antialiased;\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n\n  /* Dark theme custom colors */\n  --dark-bg: hsl(0, 0%, 5.1%);\n  --dark-card: hsl(0, 0%, 10.2%);\n  --dark-border: hsl(0, 0%, 20%);\n  --neon-yellow: hsl(51, 100%, 50%);\n  --neon-green: hsl(151, 100%, 50%);\n  --neon-blue: hsl(231, 100%, 65%);\n  --dark-gray: hsl(0, 0%, 16.5%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 5.1%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(0, 0%, 5.1%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(0, 0%, 10.2%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(0, 0%, 20%);\n  --input: hsl(0, 0%, 20%);\n  --primary: hsl(231, 100%, 65%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  html, body {\n    @apply font-sans antialiased bg-dark-bg text-foreground;\n    zoom: 100% !important;\n    overflow: hidden;\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n  }\n\n  body {\n    background-image: \n      linear-gradient(rgba(255,255,255,0.03) 1px, transparent 1px),\n      linear-gradient(90deg, rgba(255,255,255,0.03) 1px, transparent 1px);\n    background-size: 40px 40px;\n  }\n\n  html {\n    @apply dark;\n  }\n}\n\n@layer components {\n  .neon-yellow {\n    color: var(--neon-yellow);\n  }\n  \n  .neon-green {\n    color: var(--neon-green);\n  }\n  \n  .neon-blue {\n    color: var(--neon-blue);\n  }\n  \n  .bg-neon-yellow {\n    background-color: var(--neon-yellow);\n  }\n  \n  .bg-neon-green {\n    background-color: var(--neon-green);\n  }\n  \n  .bg-neon-blue {\n    background-color: var(--neon-blue);\n  }\n\n  .bg-dark-bg {\n    background-color: var(--dark-bg);\n  }\n\n  .bg-dark-card {\n    background-color: var(--dark-card);\n  }\n\n  .border-dark-border {\n    border-color: var(--dark-border);\n  }\n\n  canvas {\n    user-select: none;\n    -webkit-user-drag: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    touch-action: none;\n    zoom: 100% !important;\n  }\n\n  /* Prevent browser zoom */\n  * {\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    -webkit-user-drag: none;\n    -khtml-user-drag: none;\n    -moz-user-drag: none;\n    -o-user-drag: none;\n    user-drag: none;\n  }\n\n  .glow-hover {\n    transition: all 0.3s ease;\n  }\n\n  .glow-hover:hover {\n    box-shadow: 0 0 20px rgba(255, 215, 0, 0.4);\n    transform: translateY(-2px);\n  }\n\n  .glow-green:hover {\n    box-shadow: 0 0 20px rgba(0, 255, 136, 0.4);\n  }\n\n  .glow-blue:hover {\n    box-shadow: 0 0 20px rgba(84, 101, 255, 0.4);\n  }\n\n  .snake-preview {\n    background: radial-gradient(circle, rgba(0,255,136,0.2) 0%, transparent 70%);\n  }\n\n  .pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  .bounce-slow {\n    animation: bounce 2s infinite;\n  }\n}\n\n/* Confetti animation */\n@keyframes confetti-fall {\n  0% {\n    transform: translateY(-100vh) rotate(0deg);\n    opacity: 1;\n  }\n  100% {\n    transform: translateY(100vh) rotate(360deg);\n    opacity: 0;\n  }\n}\n","size_bytes":4515},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/LoadingScreen.tsx":{"content":"import { useState, useEffect } from 'react';\n\ninterface LoadingScreenProps {\n  onLoadingComplete: () => void;\n}\n\nexport default function LoadingScreen({ onLoadingComplete }: LoadingScreenProps) {\n  const [loadingProgress, setLoadingProgress] = useState(0);\n  const [loadingText, setLoadingText] = useState('LOADING...');\n\n  useEffect(() => {\n    const loadingSteps = [\n      { text: 'INITIALIZING GAME...', delay: 600, progress: 20 },\n      { text: 'LOADING ASSETS...', delay: 800, progress: 40 },\n      { text: 'SPAWNING SNAKES...', delay: 700, progress: 70 },\n      { text: 'PREPARING ARENA...', delay: 600, progress: 90 },\n      { text: 'FINALIZING...', delay: 400, progress: 100 },\n      { text: 'READY TO PLAY!', delay: 500, progress: 100 }\n    ];\n\n    let currentStep = 0;\n    const totalSteps = loadingSteps.length;\n\n    const runLoadingStep = () => {\n      if (currentStep < totalSteps) {\n        setLoadingText(loadingSteps[currentStep].text);\n        setLoadingProgress(loadingSteps[currentStep].progress);\n        \n        setTimeout(() => {\n          currentStep++;\n          if (currentStep < totalSteps) {\n            runLoadingStep();\n          } else {\n            // All loading complete - wait a moment at 100% before starting\n            setTimeout(() => {\n              onLoadingComplete();\n            }, 300);\n          }\n        }, loadingSteps[currentStep].delay);\n      }\n    };\n\n    runLoadingStep();\n  }, [onLoadingComplete]);\n\n  return (\n    <div className=\"absolute inset-0 z-30\" style={{ backgroundColor: '#15161b' }}>\n      <div className=\"w-full h-full flex flex-col items-center justify-center\">\n        {/* Loading Title */}\n        <div className=\"text-green-500 text-6xl font-bold mb-8\" style={{ \n          fontFamily: \"'Press Start 2P', monospace\",\n          textShadow: '4px 4px 0px #000000, 8px 8px 20px rgba(0, 255, 0, 0.5)'\n        }}>\n          SNAKE ARENA\n        </div>\n        \n        {/* Loading Text */}\n        <div className=\"text-white text-2xl mb-12\" style={{ \n          fontFamily: \"'Press Start 2P', monospace\"\n        }}>\n          {loadingText}\n        </div>\n        \n        {/* Loading Bar */}\n        <div className=\"w-96 h-4 bg-gray-800 border-2 border-gray-600 rounded\">\n          <div \n            className=\"h-full bg-gradient-to-r from-green-500 to-green-400 rounded transition-all duration-300\"\n            style={{ width: `${loadingProgress}%` }}\n          />\n        </div>\n        \n        {/* Loading Percentage */}\n        <div className=\"text-green-400 text-xl mt-4\" style={{ \n          fontFamily: \"'Press Start 2P', monospace\"\n        }}>\n          {Math.round(loadingProgress)}%\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2699},"client/src/contexts/auth-context.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { User } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AuthContextType {\n  user: User | null;\n  login: (username: string, password: string) => Promise<void>;\n  register: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  updateUser: (updates: Partial<User>) => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for stored user data on mount\n    const storedUser = localStorage.getItem(\"user\");\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (username: string, password: string) => {\n    const response = await apiRequest(\"POST\", \"/api/auth/login\", { username, password });\n    const data = await response.json();\n    setUser(data.user);\n    localStorage.setItem(\"user\", JSON.stringify(data.user));\n  };\n\n  const register = async (username: string, password: string) => {\n    const response = await apiRequest(\"POST\", \"/api/auth/register\", { username, password });\n    const data = await response.json();\n    setUser(data.user);\n    localStorage.setItem(\"user\", JSON.stringify(data.user));\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"user\");\n  };\n\n  const updateUser = (updates: Partial<User>) => {\n    if (user) {\n      const updatedUser = { ...user, ...updates };\n      setUser(updatedUser);\n      localStorage.setItem(\"user\", JSON.stringify(updatedUser));\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ \n      user, \n      login, \n      register, \n      logout, \n      updateUser, \n      isLoading \n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2202},"client/src/contexts/game-context.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from \"react\";\n\ninterface GameContextType {\n  selectedBetAmount: number;\n  setSelectedBetAmount: (amount: number) => void;\n}\n\nconst GameContext = createContext<GameContextType | undefined>(undefined);\n\nexport function GameProvider({ children }: { children: ReactNode }) {\n  const [selectedBetAmount, setSelectedBetAmount] = useState(1);\n\n  return (\n    <GameContext.Provider value={{\n      selectedBetAmount,\n      setSelectedBetAmount\n    }}>\n      {children}\n    </GameContext.Provider>\n  );\n}\n\nexport function useGame() {\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error(\"useGame must be used within a GameProvider\");\n  }\n  return context;\n}\n","size_bytes":747},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/SmoothSnake.ts":{"content":"interface Position {\n  x: number;\n  y: number;\n}\n\nexport class SmoothSnake {\n  head: Position;\n  currentAngle: number;\n  turnSpeed: number;\n  speed: number;\n  baseSpeed: number;\n  boostMultiplier: number;\n  isBoosting: boolean;\n  boostCooldown: number;\n  \n  // Trail and segment system\n  segmentTrail: Position[];\n  visibleSegments: Array<{ x: number; y: number; opacity: number }>; // Segments with opacity for fading\n  totalMass: number;\n  growthRemaining: number;\n  partialGrowth: number; // For faster mass-to-segment conversion\n  distanceBuffer: number;\n  currentSegmentCount: number; // Smoothly animated segment count\n  \n  // Constants\n  START_MASS: number;\n  MASS_PER_SEGMENT: number;\n  SEGMENT_SPACING: number;\n  SEGMENT_RADIUS: number;\n  MIN_MASS_TO_BOOST: number;\n  \n  // Money system\n  money: number;\n  \n  constructor(x: number, y: number) {\n    // Movement properties\n    this.head = { x, y };\n    this.currentAngle = 0;\n    this.turnSpeed = 0.032; // Reduced by 20% (0.04 * 0.8) for smoother turning\n    this.baseSpeed = 1.2;\n    this.boostMultiplier = 2.0;\n    this.speed = this.baseSpeed;\n    this.isBoosting = false;\n    this.boostCooldown = 0;\n    \n    // Snake system constants\n    this.START_MASS = 6; // Start with exactly 6 segments for consistent multiplayer\n    this.MASS_PER_SEGMENT = 1;\n    this.SEGMENT_SPACING = 10; // Heavy overlap (radius=10, so 10px overlap for maximum density)\n    this.SEGMENT_RADIUS = 10;\n    this.MIN_MASS_TO_BOOST = 4;\n    \n    // Initialize trail and segments with longer starting trail\n    this.segmentTrail = [];\n    // Create initial trail going backwards from start position\n    for (let i = 0; i < 30; i++) {\n      this.segmentTrail.push({ \n        x: x - i * this.SEGMENT_SPACING * 0.8, \n        y: y \n      });\n    }\n    this.visibleSegments = [];\n    this.totalMass = this.START_MASS;\n    console.log(`NEW SNAKE CREATED: mass=${this.totalMass}, visibleSegments=${this.visibleSegments.length}, trail=${this.segmentTrail.length}`);\n    this.growthRemaining = 0;\n    this.partialGrowth = 0; // Initialize partialGrowth for faster mass conversion\n    this.distanceBuffer = 0;\n    this.currentSegmentCount = this.START_MASS; // Start with exactly START_MASS segments\n    \n    // Force immediate segment generation\n    console.log(`Before updateVisibleSegments: currentSegmentCount=${this.currentSegmentCount}`);\n    \n    // Initialize money\n    this.money = 1.00;\n    \n    this.updateVisibleSegments();\n    console.log(`After updateVisibleSegments: visibleSegments.length=${this.visibleSegments.length}`);\n  }\n  \n  updateVisibleSegments() {\n    // HARD CAP: Segments absolutely cannot exceed 100 under any circumstances\n    const MAX_SEGMENTS = 100;\n    const massBasedSegments = Math.floor(this.totalMass / this.MASS_PER_SEGMENT);\n    const targetSegmentCount = Math.min(massBasedSegments, MAX_SEGMENTS);\n    \n    // Smoothly animate currentSegmentCount toward target, but ENFORCE cap at MAX_SEGMENTS\n    const transitionSpeed = 0.08;\n    if (this.currentSegmentCount < targetSegmentCount && this.currentSegmentCount < MAX_SEGMENTS) {\n      this.currentSegmentCount += transitionSpeed;\n    } else if (this.currentSegmentCount > targetSegmentCount) {\n      this.currentSegmentCount -= transitionSpeed;\n    }\n    \n    // CRITICAL: Absolute hard cap - no segments beyond 100 ever\n    this.currentSegmentCount = Math.max(1, Math.min(this.currentSegmentCount, MAX_SEGMENTS));\n    \n    // Use floor for solid segments, check if we need a fading segment\n    const solidSegmentCount = Math.floor(this.currentSegmentCount);\n    const fadeAmount = this.currentSegmentCount - solidSegmentCount;\n    \n    this.visibleSegments = [];\n    let distanceSoFar = 0;\n    let segmentIndex = 0;\n    // ABSOLUTE CAP: Never place more than 100 segments regardless of any other calculation\n    let totalSegmentsToPlace = Math.min(Math.ceil(this.currentSegmentCount), MAX_SEGMENTS);\n    \n    // Process all segments in one pass to avoid distance calculation issues\n    for (let i = 1; i < this.segmentTrail.length && this.visibleSegments.length < totalSegmentsToPlace; i++) {\n      const a = this.segmentTrail[i - 1];\n      const b = this.segmentTrail[i];\n      \n      const dx = b.x - a.x;\n      const dy = b.y - a.y;\n      const segmentDist = Math.sqrt(dx * dx + dy * dy);\n      \n      // Calculate dynamic segment spacing based on snake size\n      // Small snakes: tight spacing (12), Large snakes: spread out (18)\n      const segmentProgress = Math.min(this.currentSegmentCount / MAX_SEGMENTS, 1.0);\n      const dynamicSpacing = this.SEGMENT_SPACING + (segmentProgress * 6); // 12 to 18 spacing\n      \n      // Check if we need to place segments in this trail section\n      // TRIPLE CHECK: Enforce 100 segment limit at every placement\n      while (distanceSoFar + dynamicSpacing <= (distanceSoFar + segmentDist) && \n             this.visibleSegments.length < totalSegmentsToPlace && \n             this.visibleSegments.length < MAX_SEGMENTS &&\n             segmentIndex < MAX_SEGMENTS) {\n        \n        const progress = distanceSoFar / (distanceSoFar + segmentDist);\n        const segmentX = a.x + (b.x - a.x) * progress;\n        const segmentY = a.y + (b.y - a.y) * progress;\n        \n        // Determine opacity for this segment\n        let opacity = 1.0;\n        if (segmentIndex >= solidSegmentCount) {\n          // This is the fading segment\n          opacity = fadeAmount;\n        }\n        \n        this.visibleSegments.push({ x: segmentX, y: segmentY, opacity });\n        \n        distanceSoFar += dynamicSpacing;\n        segmentIndex++;\n      }\n      \n      distanceSoFar += segmentDist;\n    }\n  }\n  \n  move(directionX: number, directionY: number) {\n    // Handle turn multiplier when boosting\n    const dynamicTurnSpeed = this.isBoosting ? this.turnSpeed * 2 : this.turnSpeed;\n    \n    // Calculate target angle towards mouse direction\n    const targetAngle = Math.atan2(directionY, directionX);\n    \n    // Smoothly interpolate current angle towards target\n    let angleDiff = targetAngle - this.currentAngle;\n    \n    // Normalize angle difference to [-π, π]\n    while (angleDiff > Math.PI) angleDiff -= 2 * Math.PI;\n    while (angleDiff < -Math.PI) angleDiff += 2 * Math.PI;\n    \n    // Apply turning\n    this.currentAngle += angleDiff * dynamicTurnSpeed;\n    \n    // Normalize current angle\n    while (this.currentAngle > Math.PI) this.currentAngle -= 2 * Math.PI;\n    while (this.currentAngle < -Math.PI) this.currentAngle += 2 * Math.PI;\n    \n    // Handle boosting mechanics\n    if (this.isBoosting && this.totalMass > this.MIN_MASS_TO_BOOST && this.boostCooldown <= 0) {\n      this.speed = this.baseSpeed * this.boostMultiplier;\n      this.boostCooldown++;\n      \n      // Sprint mechanics without food drops\n      if (this.boostCooldown % 10 === 0) {\n        this.totalMass -= 0.25; // Reduce mass when boosting\n      }\n      \n      // Lose mass when boosting\n      this.totalMass = Math.max(this.MIN_MASS_TO_BOOST, this.totalMass - 0.08);\n    } else {\n      this.speed = this.baseSpeed;\n      this.isBoosting = false; // Stop boosting if not enough mass\n    }\n    \n    // Update boost cooldown\n    if (this.boostCooldown > 0) {\n      this.boostCooldown--;\n    }\n    \n    // Calculate new head position\n    this.head.x += Math.cos(this.currentAngle) * this.speed;\n    this.head.y += Math.sin(this.currentAngle) * this.speed;\n    \n    // Add new trail point\n    this.segmentTrail.unshift({ x: this.head.x, y: this.head.y });\n    \n    // Keep trail at reasonable length (increased for longer trails)\n    if (this.segmentTrail.length > 2000) {\n      this.segmentTrail = this.segmentTrail.slice(0, 1500);\n    }\n    \n    this.updateVisibleSegments();\n  }\n  \n  setBoost(boosting: boolean) {\n    if (boosting && this.totalMass > this.MIN_MASS_TO_BOOST && this.boostCooldown <= 0) {\n      this.isBoosting = true;\n    } else {\n      this.isBoosting = false;\n    }\n  }\n  \n  grow(mass: number) {\n    // Cap mass growth at 100 - no strength increase beyond this point\n    const MAX_MASS = 100;\n    \n    if (this.totalMass >= MAX_MASS) {\n      return; // No growth if already at max mass\n    }\n    \n    const actualMassToAdd = Math.min(mass, MAX_MASS - this.totalMass);\n    if (actualMassToAdd > 0) {\n      this.totalMass += actualMassToAdd;\n      this.growthRemaining += actualMassToAdd;\n    }\n  }\n  \n  getScaleFactor(): number {\n    return Math.min(1 + (this.totalMass - this.START_MASS) / 100, 3);\n  }\n\n  getSegmentRadius(): number {\n    const baseRadius = 8;\n    const maxScale = 5;\n    // Cap width scaling at 100 segments, not mass\n    const MAX_SEGMENTS = 100;\n    const currentSegments = Math.min(this.visibleSegments.length, MAX_SEGMENTS);\n    const scaleFactor = Math.min(1 + (currentSegments - 10) / 100, maxScale);\n    return baseRadius * scaleFactor;\n  }\n  \n  addMoney(amount: number) {\n    this.money += amount;\n  }\n  \n  reset(x: number, y: number) {\n    this.head = { x, y };\n    this.currentAngle = 0;\n    this.speed = this.baseSpeed;\n    this.isBoosting = false;\n    this.boostCooldown = 0;\n    this.segmentTrail = [{ x, y }];\n    this.visibleSegments = [];\n    this.totalMass = this.START_MASS;\n    this.growthRemaining = 0;\n    this.partialGrowth = 0;\n    this.distanceBuffer = 0;\n    this.currentSegmentCount = this.START_MASS;\n    this.money = 1.00;\n    this.updateVisibleSegments();\n  }\n}","size_bytes":9357},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/game.tsx":{"content":"import { useRef, useEffect, useState } from 'react';\nimport { useLocation, useParams } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { X, Volume2 } from 'lucide-react';\nimport dollarSignImageSrc from '@assets/$ (1)_1753992938537.png';\nimport moneyCrateImageSrc from '@assets/$ (1)_1754305354543.png';\nimport LoadingScreen from '@/components/LoadingScreen';\n\n// Game constants\nconst MAP_CENTER_X = 2000;\nconst MAP_CENTER_Y = 2000;\nconst MAP_RADIUS = 1800; // Circular map radius\nconst FOOD_COUNT = 160; // Doubled food count for more abundant gameplay\nconst FOOD_GRAVITY = 0.147; // Reduced by another 30% (0.21 * 0.7) for gentler attraction\nconst FOOD_MAX_SPEED = 0.52; // 35% slower speed (0.8 * 0.65) for smoother attraction\nconst FOOD_ATTRACTION_RADIUS = 50; // Reduced to 50px attraction range\nconst FOOD_CONSUMPTION_RADIUS = 15; // Distance to consume food\nconst BOT_COUNT = 5;\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\n// Food interface with gravitational physics\ninterface Food {\n  id: string;\n  x: number;\n  y: number;\n  vx: number; // velocity x\n  vy: number; // velocity y\n  color: string;\n  radius: number;\n  mass: number;\n  wobbleOffset: number;\n  expiresAt?: number; // Optional expiration timestamp for boost food\n  opacity?: number; // Optional opacity for fading boost food\n  isBoostFood?: boolean; // Flag to identify boost food for special rendering\n  isMoneyCrate?: boolean; // Flag to identify money crates\n  moneyValue?: number; // Money value for money crates\n}\n\ninterface BotSnake {\n  id: string;\n  head: Position;\n  visibleSegments: Array<{ x: number; y: number; opacity: number }>;\n  segmentTrail: Position[];\n  totalMass: number;\n  currentAngle: number;\n  speed: number;\n  baseSpeed: number;\n  color: string;\n  targetAngle: number;\n  lastDirectionChange: number;\n  // targetFood removed\n  money: number; // Bot's money balance\n  state: 'wander' | 'foodHunt' | 'avoid' | 'aggro'; // Bot behavior state\n  targetFood: Food | null; // Food the bot is targeting\n  isBoosting: boolean;\n  boostTime: number;\n  lastStateChange: number;\n  aggroTarget: SmoothSnake | BotSnake | null;\n}\n\n// Utility functions for food system\nfunction getRandomFoodColor(): string {\n  const colors = [\n    '#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57', \n    '#ff9ff3', '#54a0ff', '#5f27cd', '#fd79a8', '#fdcb6e',\n    '#6c5ce7', '#a29bfe', '#74b9ff', '#0984e3', '#00b894',\n    '#00cec9', '#55a3ff', '#ff7675', '#e84393', '#a0e4cb',\n    '#ffeaa7', '#fab1a0', '#e17055', '#81ecec', '#74b9ff'\n  ];\n  return colors[Math.floor(Math.random() * colors.length)];\n}\n\nfunction createFood(id: string): Food {\n  // Spawn food evenly distributed across the entire map\n  const angle = Math.random() * Math.PI * 2;\n  const radius = Math.sqrt(Math.random()) * (MAP_RADIUS - 50); // Square root for even distribution\n  const x = MAP_CENTER_X + Math.cos(angle) * radius;\n  const y = MAP_CENTER_Y + Math.sin(angle) * radius;\n  \n  return {\n    id,\n    x,\n    y,\n    vx: 0,\n    vy: 0,\n    color: getRandomFoodColor(),\n    radius: 6 + Math.random() * 4, // Size varies from 6-10px\n    mass: 0.9, // 3x mass value (0.3 * 3)\n    wobbleOffset: Math.random() * Math.PI * 2\n  };\n}\n\nfunction updateFoodGravity(food: Food, allSnakes: Array<{ head: Position; totalMass: number }>): Food {\n  const updated = { ...food };\n  \n  // Find nearest snake\n  let nearestSnake = null;\n  let nearestDistance = Infinity;\n  \n  for (const snake of allSnakes) {\n    const dx = snake.head.x - food.x;\n    const dy = snake.head.y - food.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    \n    if (distance < nearestDistance) {\n      nearestDistance = distance;\n      nearestSnake = snake;\n    }\n  }\n  \n  if (nearestSnake && nearestDistance < FOOD_ATTRACTION_RADIUS) { // Only attract within 25px\n    const dx = nearestSnake.head.x - food.x;\n    const dy = nearestSnake.head.y - food.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    \n    if (distance > 0) {\n      // Gentle attraction force\n      const force = FOOD_GRAVITY; // Use base gravity for slower movement\n      updated.vx += (dx / distance) * force;\n      updated.vy += (dy / distance) * force;\n      \n      // Cap velocity\n      const speed = Math.sqrt(updated.vx * updated.vx + updated.vy * updated.vy);\n      if (speed > FOOD_MAX_SPEED) {\n        updated.vx = (updated.vx / speed) * FOOD_MAX_SPEED;\n        updated.vy = (updated.vy / speed) * FOOD_MAX_SPEED;\n      }\n      \n      // Reduced debug logging\n      if (Math.random() < 0.001) { // Much less frequent logging\n        console.log(`🍎 Food ${food.id.slice(-3)} attracted: ${distance.toFixed(1)}px away, moving at ${speed.toFixed(2)} speed`);\n      }\n    }\n  } else {\n    // When not being attracted, gradually slow down more smoothly\n    updated.vx *= 0.95;\n    updated.vy *= 0.95;\n  }\n  \n  // Apply velocity to update position\n  const oldX = updated.x;\n  const oldY = updated.y;\n  updated.x += updated.vx;\n  updated.y += updated.vy;\n  \n  // Debug position updates for testing\n  if (Math.random() < 0.002 && (Math.abs(updated.vx) > 0.1 || Math.abs(updated.vy) > 0.1)) {\n    console.log(`📍 Food moved: ${food.id.slice(-3)} from (${oldX.toFixed(1)}, ${oldY.toFixed(1)}) to (${updated.x.toFixed(1)}, ${updated.y.toFixed(1)}) | velocity: (${updated.vx.toFixed(2)}, ${updated.vy.toFixed(2)})`);\n  }\n  \n  // Keep food within map bounds\n  const distanceFromCenter = Math.sqrt(\n    (updated.x - MAP_CENTER_X) ** 2 + (updated.y - MAP_CENTER_Y) ** 2\n  );\n  if (distanceFromCenter > MAP_RADIUS - 50) {\n    const angle = Math.atan2(updated.y - MAP_CENTER_Y, updated.x - MAP_CENTER_X);\n    updated.x = MAP_CENTER_X + Math.cos(angle) * (MAP_RADIUS - 50);\n    updated.y = MAP_CENTER_Y + Math.sin(angle) * (MAP_RADIUS - 50);\n    updated.vx = 0;\n    updated.vy = 0;\n  }\n  \n  return updated;\n}\n\n// Bot snake utility functions\nfunction createBotSnake(id: string): BotSnake {\n  // Spawn bot at random location within map\n  const angle = Math.random() * Math.PI * 2;\n  const radius = Math.random() * (MAP_RADIUS - 200);\n  const x = MAP_CENTER_X + Math.cos(angle) * radius;\n  const y = MAP_CENTER_Y + Math.sin(angle) * radius;\n  \n  const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57', '#ff9ff3', '#54a0ff'];\n  const baseSpeed = 0.9 + Math.random() * 0.4; // Slightly slower than player\n  \n  return {\n    id,\n    head: { x, y },\n    visibleSegments: [{ x, y, opacity: 1.0 }],\n    segmentTrail: [{ x, y }],\n    totalMass: 8 + Math.random() * 12, // Start with 8-20 mass\n    currentAngle: Math.random() * Math.PI * 2,\n    speed: baseSpeed,\n    baseSpeed: baseSpeed,\n    color: colors[Math.floor(Math.random() * colors.length)],\n    targetAngle: Math.random() * Math.PI * 2,\n    lastDirectionChange: 0,\n\n    money: 1.00, // All bots start with exactly $1.00\n    state: 'wander',\n    targetFood: null,\n    isBoosting: false,\n    boostTime: 0,\n    lastStateChange: Date.now(),\n    aggroTarget: null\n  };\n}\n\nfunction updateBotSnake(bot: BotSnake, playerSnake: SmoothSnake, otherBots: BotSnake[]): BotSnake {\n  // Enhanced AI Decision making with aggressive behavior\n  const SEGMENT_SPACING = 10;\n  const SEGMENT_RADIUS = 10;\n  const currentTime = Date.now();\n  \n\n  \n  // Check for nearby threats (less sensitive for more aggressive play)\n  let nearestThreat: { x: number, y: number, distance: number } | null = null;\n  let threatDistance = Infinity;\n  \n  // Check player snake segments for collision avoidance (reduced sensitivity)\n  for (let i = 1; i < playerSnake.visibleSegments.length; i++) { // Skip head (index 0)\n    const segment = playerSnake.visibleSegments[i];\n    const dist = Math.sqrt((bot.head.x - segment.x) ** 2 + (bot.head.y - segment.y) ** 2);\n    if (dist < 60 && dist < threatDistance) { // Reduced danger zone for more aggressive play\n      threatDistance = dist;\n      nearestThreat = { x: segment.x, y: segment.y, distance: dist };\n    }\n  }\n  \n  // Check other bot snakes for collision avoidance\n  for (const otherBot of otherBots) {\n    if (otherBot.id === bot.id) continue;\n    for (const segment of otherBot.visibleSegments) {\n      const dist = Math.sqrt((bot.head.x - segment.x) ** 2 + (bot.head.y - segment.y) ** 2);\n      if (dist < 40 && dist < threatDistance) { // Smaller danger zone for other bots\n        threatDistance = dist;\n        nearestThreat = { x: segment.x, y: segment.y, distance: dist };\n      }\n    }\n  }\n  \n  // Aggressive player hunting behavior\n  const playerHeadDist = Math.sqrt((bot.head.x - playerSnake.head.x) ** 2 + (bot.head.y - playerSnake.head.y) ** 2);\n  let shouldHuntPlayer = false;\n  \n  // Hunt player if bot is bigger or player is close and vulnerable\n  if (bot.totalMass > playerSnake.totalMass * 0.8 && playerHeadDist < 200) {\n    shouldHuntPlayer = true;\n  }\n  \n  // Threat avoidance (less sensitive)\n  if (nearestThreat && nearestThreat.distance < 40) { // Reduced avoidance threshold\n    // Calculate escape angle (away from threat)\n    const threatAngle = Math.atan2(nearestThreat.y - bot.head.y, nearestThreat.x - bot.head.x);\n    bot.targetAngle = threatAngle + Math.PI; // Opposite direction\n    bot.lastDirectionChange = currentTime;\n    \n    // Boost when escaping danger\n    if (bot.totalMass > 4 && !bot.isBoosting && Math.random() < 0.05) {\n      bot.isBoosting = true;\n      bot.boostTime = currentTime;\n    }\n  } else if (shouldHuntPlayer) {\n    // Hunt the player aggressively\n    bot.targetAngle = Math.atan2(playerSnake.head.y - bot.head.y, playerSnake.head.x - bot.head.x);\n    bot.lastDirectionChange = currentTime;\n    \n    // Boost when hunting if close enough\n    if (playerHeadDist < 100 && bot.totalMass > 6 && !bot.isBoosting && Math.random() < 0.03) {\n      bot.isBoosting = true;\n      bot.boostTime = currentTime;\n    }\n  } else {\n    // Random wandering behavior (food targeting removed)\n    if (currentTime - bot.lastDirectionChange > 800 + Math.random() * 1200) {\n      const distFromCenter = Math.sqrt((bot.head.x - MAP_CENTER_X) ** 2 + (bot.head.y - MAP_CENTER_Y) ** 2);\n      if (distFromCenter > MAP_RADIUS * 0.6) {\n        // Move toward center when near edges\n        const angleToCenter = Math.atan2(MAP_CENTER_Y - bot.head.y, MAP_CENTER_X - bot.head.x);\n        bot.targetAngle = angleToCenter + (Math.random() - 0.5) * Math.PI * 0.3;\n      } else {\n        // Random but more purposeful movement\n        bot.targetAngle = Math.random() * Math.PI * 2;\n      }\n      bot.lastDirectionChange = currentTime;\n    }\n  }\n  \n  // Smooth angle interpolation\n  let angleDiff = bot.targetAngle - bot.currentAngle;\n  while (angleDiff > Math.PI) angleDiff -= 2 * Math.PI;\n  while (angleDiff < -Math.PI) angleDiff += 2 * Math.PI;\n  \n  // Faster turning for more responsive movement\n  const turnSpeed = bot.isBoosting ? 0.06 : 0.04; // Faster turning when boosting\n  bot.currentAngle += angleDiff * turnSpeed;\n  \n  // Keep angle in range\n  if (bot.currentAngle > Math.PI) bot.currentAngle -= 2 * Math.PI;\n  if (bot.currentAngle < -Math.PI) bot.currentAngle += 2 * Math.PI;\n  \n  // Update boost state timing\n  if (bot.isBoosting && currentTime - bot.boostTime > 1200) {\n    bot.isBoosting = false;\n  }\n  \n  // Calculate speed with boosting\n  let currentSpeed = bot.baseSpeed;\n  if (bot.isBoosting && bot.totalMass > 4) {\n    currentSpeed *= 1.8; // Boost multiplier\n    // Lose mass when boosting (like player)\n    bot.totalMass -= 0.03;\n    if (bot.totalMass < 4) {\n      bot.isBoosting = false; // Stop boosting if too small\n    }\n  }\n  \n  // Move bot\n  const dx = Math.cos(bot.currentAngle) * currentSpeed;\n  const dy = Math.sin(bot.currentAngle) * currentSpeed;\n  \n  bot.head.x += dx;\n  bot.head.y += dy;\n  \n  // Keep bot within circular map bounds\n  const distFromCenter = Math.sqrt((bot.head.x - MAP_CENTER_X) ** 2 + (bot.head.y - MAP_CENTER_Y) ** 2);\n  if (distFromCenter > MAP_RADIUS - 50) {\n    const angleToCenter = Math.atan2(MAP_CENTER_Y - bot.head.y, MAP_CENTER_X - bot.head.x);\n    bot.targetAngle = angleToCenter;\n  }\n  \n  // Update trail\n  bot.segmentTrail.unshift({ x: bot.head.x, y: bot.head.y });\n  const maxTrailLength = Math.floor((bot.totalMass / 1) * SEGMENT_SPACING * 2);\n  if (bot.segmentTrail.length > maxTrailLength) {\n    bot.segmentTrail.length = maxTrailLength;\n  }\n  \n  // Update visible segments\n  bot.visibleSegments = [];\n  let distanceSoFar = 0;\n  let segmentIndex = 0;\n  const targetSegmentCount = Math.floor(bot.totalMass / 1);\n  \n  for (let i = 1; i < bot.segmentTrail.length && bot.visibleSegments.length < targetSegmentCount; i++) {\n    const a = bot.segmentTrail[i - 1];\n    const b = bot.segmentTrail[i];\n    \n    const dx = b.x - a.x;\n    const dy = b.y - a.y;\n    const segmentDist = Math.sqrt(dx * dx + dy * dy);\n    \n    while (distanceSoFar + segmentDist >= segmentIndex * SEGMENT_SPACING && bot.visibleSegments.length < targetSegmentCount) {\n      const targetDistance = segmentIndex * SEGMENT_SPACING;\n      const overshoot = targetDistance - distanceSoFar;\n      const t = segmentDist > 0 ? overshoot / segmentDist : 0;\n      \n      const x = a.x + dx * t;\n      const y = a.y + dy * t;\n      \n      bot.visibleSegments.push({ x, y, opacity: 1.0 });\n      segmentIndex++;\n    }\n    \n    distanceSoFar += segmentDist;\n  }\n  \n  return bot;\n}\n\nclass SmoothSnake {\n  head: Position;\n  currentAngle: number;\n  turnSpeed: number;\n  speed: number;\n  baseSpeed: number;\n  boostMultiplier: number;\n  isBoosting: boolean;\n  boostCooldown: number;\n  \n  // Trail and segment system\n  segmentTrail: Position[];\n  visibleSegments: Array<{ x: number; y: number; opacity: number }>; // Segments with opacity for fading\n  totalMass: number;\n  growthRemaining: number;\n  partialGrowth: number; // For faster mass-to-segment conversion\n  distanceBuffer: number;\n  currentSegmentCount: number; // Smoothly animated segment count\n  \n  // Constants\n  START_MASS: number;\n  MASS_PER_SEGMENT: number;\n  SEGMENT_SPACING: number;\n  SEGMENT_RADIUS: number;\n  MIN_MASS_TO_BOOST: number;\n  \n  // Money system\n  money: number;\n  \n  // Snake appearance\n  color: string;\n  \n  // Callback for dropping boost food\n  onDropFood?: (food: any) => void;\n  \n  constructor(x: number, y: number, color: string = '#d55400') {\n    // Movement properties\n    this.head = { x, y };\n    this.currentAngle = 0;\n    this.turnSpeed = 0.032; // Reduced by 20% (0.04 * 0.8) for smoother turning\n    this.baseSpeed = 1.2;\n    this.boostMultiplier = 2.0;\n    this.speed = this.baseSpeed;\n    this.isBoosting = false;\n    this.boostCooldown = 0;\n    \n    // Set snake color\n    this.color = color;\n    \n    // Snake system constants\n    this.START_MASS = 6; // Start with just 6 segments instead of 30\n    this.MASS_PER_SEGMENT = 1;\n    this.SEGMENT_SPACING = 10; // Heavy overlap (radius=10, so 10px overlap for maximum density)\n    this.SEGMENT_RADIUS = 10;\n    this.MIN_MASS_TO_BOOST = 4;\n    \n    // Initialize trail and segments\n    this.segmentTrail = [{ x, y }];\n    this.visibleSegments = [];\n    this.totalMass = this.START_MASS;\n    this.growthRemaining = 0;\n    this.partialGrowth = 0; // Initialize partialGrowth for faster mass conversion\n    this.distanceBuffer = 0;\n    this.currentSegmentCount = this.START_MASS; // Start with initial segment count\n    \n    // Initialize money\n    this.money = 1.00;\n    \n    this.updateVisibleSegments();\n  }\n  \n  updateVisibleSegments() {\n    // HARD CAP: Segments absolutely cannot exceed 100 under any circumstances\n    const MAX_SEGMENTS = 100;\n    const massBasedSegments = Math.floor(this.totalMass / this.MASS_PER_SEGMENT);\n    const targetSegmentCount = Math.min(massBasedSegments, MAX_SEGMENTS);\n    \n    // Smoothly animate currentSegmentCount toward target, but ENFORCE cap at MAX_SEGMENTS\n    const transitionSpeed = 0.08;\n    if (this.currentSegmentCount < targetSegmentCount && this.currentSegmentCount < MAX_SEGMENTS) {\n      this.currentSegmentCount += transitionSpeed;\n    } else if (this.currentSegmentCount > targetSegmentCount) {\n      this.currentSegmentCount -= transitionSpeed;\n    }\n    \n    // CRITICAL: Absolute hard cap - no segments beyond 100 ever\n    this.currentSegmentCount = Math.max(1, Math.min(this.currentSegmentCount, MAX_SEGMENTS));\n    \n    // Use floor for solid segments, check if we need a fading segment\n    const solidSegmentCount = Math.floor(this.currentSegmentCount);\n    const fadeAmount = this.currentSegmentCount - solidSegmentCount;\n    \n    this.visibleSegments = [];\n    let distanceSoFar = 0;\n    let segmentIndex = 0;\n    // ABSOLUTE CAP: Never place more than 100 segments regardless of any other calculation\n    let totalSegmentsToPlace = Math.min(Math.ceil(this.currentSegmentCount), MAX_SEGMENTS);\n    \n    // Process all segments in one pass to avoid distance calculation issues\n    for (let i = 1; i < this.segmentTrail.length && this.visibleSegments.length < totalSegmentsToPlace; i++) {\n      const a = this.segmentTrail[i - 1];\n      const b = this.segmentTrail[i];\n      \n      const dx = b.x - a.x;\n      const dy = b.y - a.y;\n      const segmentDist = Math.sqrt(dx * dx + dy * dy);\n      \n      // Calculate dynamic segment spacing based on snake size\n      // Small snakes: tight spacing (12), Large snakes: spread out (18)\n      const segmentProgress = Math.min(this.currentSegmentCount / MAX_SEGMENTS, 1.0);\n      const dynamicSpacing = this.SEGMENT_SPACING + (segmentProgress * 6); // 12 to 18 spacing\n      \n      // Check if we need to place segments in this trail section\n      // TRIPLE CHECK: Enforce 100 segment limit at every placement\n      while (distanceSoFar + segmentDist >= segmentIndex * dynamicSpacing && \n             this.visibleSegments.length < totalSegmentsToPlace &&\n             this.visibleSegments.length < MAX_SEGMENTS &&\n             segmentIndex < MAX_SEGMENTS) {\n        const targetDistance = segmentIndex * dynamicSpacing;\n        const overshoot = targetDistance - distanceSoFar;\n        const t = segmentDist > 0 ? overshoot / segmentDist : 0;\n        \n        // Linear interpolation between trail points\n        const x = a.x + dx * t;\n        const y = a.y + dy * t;\n        \n        // Determine opacity - solid for most segments, fading for the last one\n        let opacity = 1.0;\n        if (segmentIndex >= solidSegmentCount) {\n          // This is the fading segment - only add if opacity is significant\n          opacity = fadeAmount;\n          if (opacity < 0.15) { // Minimum threshold to prevent flickering\n            break;\n          }\n        }\n        \n        this.visibleSegments.push({ x, y, opacity });\n        segmentIndex++;\n      }\n      \n      distanceSoFar += segmentDist;\n    }\n  }\n  \n  applyGrowth() {\n    // Gradually increase mass from growthRemaining\n    // Don't add segments manually - let updateVisibleSegments reveal them from trail\n    if (this.growthRemaining > 0.05) {\n      this.totalMass += 0.05;\n      this.growthRemaining -= 0.05;\n      // As totalMass increases, more trail segments become visible (smooth tail growth)\n      this.updateVisibleSegments();\n    }\n  }\n  \n  getSegmentRadius() {\n    // Cap width scaling at 100 segments, not mass\n    const maxScale = 5;\n    const MAX_SEGMENTS = 100;\n    const currentSegments = Math.min(this.visibleSegments.length, MAX_SEGMENTS);\n    const scaleFactor = Math.min(1 + (currentSegments - 10) / 100, maxScale);\n    return this.SEGMENT_RADIUS * scaleFactor;\n  }\n\n  // Get scale factor for all visual elements\n  getScaleFactor() {\n    const maxScale = 5;\n    return Math.min(1 + (this.totalMass - 10) / 100, maxScale);\n  }\n  \n  move(mouseDirectionX: number, mouseDirectionY: number) {\n    // Calculate target angle from mouse direction\n    const targetAngle = Math.atan2(mouseDirectionY, mouseDirectionX);\n    \n    // Smooth angle interpolation with boosted turning\n    let angleDiff = targetAngle - this.currentAngle;\n    while (angleDiff > Math.PI) angleDiff -= 2 * Math.PI;\n    while (angleDiff < -Math.PI) angleDiff += 2 * Math.PI;\n    \n    // Increase turn speed while boosting to maintain same turn radius\n    const baseTurnSpeed = this.turnSpeed;\n    const boostTurnMultiplier = 2.0; // Turn 2x faster when boosting\n    const currentTurnSpeed = this.isBoosting \n      ? baseTurnSpeed * boostTurnMultiplier \n      : baseTurnSpeed;\n    \n    this.currentAngle += angleDiff * currentTurnSpeed;\n    \n    // Keep angle in range\n    if (this.currentAngle > Math.PI) this.currentAngle -= 2 * Math.PI;\n    if (this.currentAngle < -Math.PI) this.currentAngle += 2 * Math.PI;\n    \n    // Handle boost mechanics\n    this.applyBoost();\n    \n    // Move head\n    const dx = Math.cos(this.currentAngle) * this.speed;\n    const dy = Math.sin(this.currentAngle) * this.speed;\n    \n    this.head.x += dx;\n    this.head.y += dy;\n    \n    // Add head position to trail every frame for smooth following\n    this.segmentTrail.unshift({ x: this.head.x, y: this.head.y });\n\n    // Remove excess trail length (keep enough to render full snake)\n    const maxTrailLength = Math.floor((this.totalMass / this.MASS_PER_SEGMENT) * this.SEGMENT_SPACING * 2);\n    if (this.segmentTrail.length > maxTrailLength) {\n      this.segmentTrail.length = maxTrailLength;\n    }\n\n    // Sample segments at fixed spacing from the trail\n    this.updateVisibleSegments();\n    \n    // Apply gradual growth\n    this.applyGrowth();\n  }\n  \n  applyBoost() {\n    if (this.isBoosting && this.totalMass > this.MIN_MASS_TO_BOOST) {\n      this.speed = this.baseSpeed * this.boostMultiplier;\n      this.boostCooldown++;\n      \n      // Lose mass and drop food while boosting (every ~16 frames = 0.75-1 times per second)\n      if (this.boostCooldown % 16 === 0) {\n        this.totalMass = Math.max(this.MIN_MASS_TO_BOOST, this.totalMass - 0.075); // 3x faster mass drain (0.025 * 3)\n        \n        // Get tail position for food drop\n        let dropX = this.head.x;\n        let dropY = this.head.y;\n        \n        // Drop from the last visible segment (tail) if available\n        if (this.visibleSegments.length > 0) {\n          const tailSegment = this.visibleSegments[this.visibleSegments.length - 1];\n          dropX = tailSegment.x;\n          dropY = tailSegment.y;\n        } else if (this.segmentTrail.length > 10) {\n          // Fallback to trail position if no visible segments\n          const tailIndex = Math.min(this.segmentTrail.length - 1, 20);\n          dropX = this.segmentTrail[tailIndex].x;\n          dropY = this.segmentTrail[tailIndex].y;\n        }\n        \n        // Create small food particle with 10-second expiration\n        const boostFood = {\n          id: `boost_${Date.now()}_${Math.random()}`,\n          x: dropX,\n          y: dropY,\n          radius: 3, // Slightly larger for better visibility\n          mass: 0.025, // Half the previous value\n          color: this.color, // Use snake's color\n          vx: 0,\n          vy: 0,\n          wobbleOffset: Math.random() * Math.PI * 2,\n          expiresAt: Date.now() + 10000, // Expires after 10 seconds\n          isBoostFood: true // Flag to identify boost food for special rendering\n        };\n        \n        // Add to foods array (will need to be passed from game loop)\n        this.onDropFood?.(boostFood);\n      }\n    } else {\n      this.speed = this.baseSpeed;\n      this.isBoosting = false;\n    }\n  }\n  \n  // Food consumption mechanic - grow when eating food\n  eatFood(foodMass: number) {\n    // Add growth based on food mass consumed\n    this.growthRemaining += foodMass;\n    console.log(`Snake ate food worth ${foodMass} mass, growth remaining: ${this.growthRemaining}`);\n  }\n  \n  // Process growth at 10 mass per second rate\n  processGrowth(deltaTime: number) {\n    const growthRate = 10; // max 10 mass per second\n    const maxGrowthThisFrame = growthRate * deltaTime;\n    \n    const growthThisFrame = Math.min(this.growthRemaining, maxGrowthThisFrame);\n    this.partialGrowth += growthThisFrame;\n    this.growthRemaining -= growthThisFrame;\n    \n    // Add mass when we have enough partial growth, but cap at 100 total mass\n    const MAX_MASS = 100;\n    while (this.partialGrowth >= 1 && this.totalMass < MAX_MASS) {\n      this.totalMass += 1;\n      this.partialGrowth -= 1;\n    }\n  }\n  \n  setBoost(boosting: boolean) {\n    if (boosting && this.totalMass <= this.MIN_MASS_TO_BOOST) {\n      this.isBoosting = false;\n      return;\n    }\n    \n    this.isBoosting = boosting;\n    if (!boosting) {\n      this.boostCooldown = 0;\n    }\n  }\n  \n  // Get eye positions for collision detection\n  getEyePositions() {\n    if (this.visibleSegments.length === 0) return [];\n    \n    const snakeHead = this.visibleSegments[0];\n    const scaleFactor = this.getScaleFactor();\n    const eyeDistance = 5 * scaleFactor; // Same as in drawing code\n    const eyeSize = 3 * scaleFactor; // Same as in drawing code\n    \n    // Eye positions perpendicular to movement direction\n    const eye1X = snakeHead.x + Math.cos(this.currentAngle + Math.PI/2) * eyeDistance;\n    const eye1Y = snakeHead.y + Math.sin(this.currentAngle + Math.PI/2) * eyeDistance;\n    const eye2X = snakeHead.x + Math.cos(this.currentAngle - Math.PI/2) * eyeDistance;\n    const eye2Y = snakeHead.y + Math.sin(this.currentAngle - Math.PI/2) * eyeDistance;\n    \n    return [\n      { x: eye1X, y: eye1Y, size: eyeSize },\n      { x: eye2X, y: eye2Y, size: eyeSize }\n    ];\n  }\n  \n  // Method to completely clear snake when it dies\n  clearSnakeOnDeath() {\n    this.visibleSegments = []; // Clear all body segments immediately\n    this.segmentTrail = []; // Clear trail\n    this.totalMass = 0; // Reset mass to 0\n    this.money = 0; // Reset snake's money on death\n    this.growthRemaining = 0;\n    this.partialGrowth = 0;\n    this.currentSegmentCount = 0;\n    console.log(`💀 SNAKE DEATH: All segments cleared, body completely invisible`);\n  }\n  \n  // Method to get positions along the snake body for dropping money crates\n  getSnakeBodyPositions(crateCount: number): Position[] {\n    if (this.visibleSegments.length === 0) return [];\n    \n    const positions: Position[] = [];\n    const segmentCount = this.visibleSegments.length;\n    \n    // Distribute money crates evenly along the snake body\n    for (let i = 0; i < crateCount && i < segmentCount; i++) {\n      const segmentIndex = Math.floor((i / crateCount) * segmentCount);\n      const segment = this.visibleSegments[segmentIndex];\n      if (segment) {\n        // Add some random offset to spread crates out\n        const offsetX = (Math.random() - 0.5) * 20;\n        const offsetY = (Math.random() - 0.5) * 20;\n        positions.push({\n          x: segment.x + offsetX,\n          y: segment.y + offsetY\n        });\n      }\n    }\n    \n    return positions;\n  }\n}\n\nexport default function GamePage() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [, setLocation] = useLocation();\n  const params = useParams();\n  const roomId = params?.roomId || '1'; // Default to room 1 if no room specified\n  const region = params?.region || 'us'; // Default to US region if no region specified\n  const [mouseDirection, setMouseDirection] = useState<Position>({ x: 1, y: 0 });\n  const [myPlayerColor, setMyPlayerColor] = useState<string>('#d55400'); // Default orange\n  const [snake] = useState(() => {\n    const newSnake = new SmoothSnake(MAP_CENTER_X, MAP_CENTER_Y, '#d55400');\n    console.log(`NEW SNAKE CREATED: mass=${newSnake.totalMass}, visibleSegments=${newSnake.visibleSegments.length}, trail=${newSnake.segmentTrail.length}`);\n    return newSnake;\n  });\n  \n  // Update snake color when myPlayerColor changes\n  useEffect(() => {\n    snake.color = myPlayerColor;\n  }, [myPlayerColor, snake]);\n\n  // Set up callback for boost food dropping\n  useEffect(() => {\n    snake.onDropFood = (boostFood: any) => {\n      // Add boost food to local food array\n      setFoods(currentFoods => [...currentFoods, boostFood]);\n      \n      // Send boost food to server for broadcasting to other players\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n        console.log(`🍕 Sending boost food to server:`, boostFood);\n        wsRef.current.send(JSON.stringify({\n          type: 'boostFood',\n          food: boostFood\n        }));\n      } else {\n        console.log(`⚠️ Cannot send boost food - WebSocket not connected`);\n      }\n    };\n  }, [snake]);\n  const [botSnakes, setBotSnakes] = useState<BotSnake[]>([]);\n  const [serverBots, setServerBots] = useState<any[]>([]);\n  const [serverPlayers, setServerPlayers] = useState<any[]>([]);\n  const [playerInterpolationData, setPlayerInterpolationData] = useState<Map<string, {\n    lastUpdate: number;\n    currentSegments: Array<{ x: number; y: number }>;\n    targetSegments: Array<{ x: number; y: number }>;\n    interpolationProgress: number;\n  }>>(new Map());\n  const [foods, setFoods] = useState<Food[]>([]);\n  const [gameOver, setGameOver] = useState(false);\n  const gameOverRef = useRef(false);\n  const [snakeVisible, setSnakeVisible] = useState(true);\n  const snakeVisibleRef = useRef(true);\n  const [snakeFading, setSnakeFading] = useState(false);\n  const snakeFadingRef = useRef(false);\n  const [fadeOpacity, setFadeOpacity] = useState(1.0);\n  const fadeOpacityRef = useRef(1.0);\n  const fadeStartTimeRef = useRef(0);\n\n  // Sync ref with state\n  useEffect(() => {\n    gameOverRef.current = gameOver;\n  }, [gameOver]);\n  const [score, setScore] = useState(0);\n  const [isBoosting, setIsBoosting] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameStartTime, setGameStartTime] = useState<number | null>(null);\n\n  const [backgroundImage, setBackgroundImage] = useState<HTMLImageElement | null>(null);\n  const [dollarSignImage, setDollarSignImage] = useState<HTMLImageElement | null>(null);\n  const [moneyCrateImage, setMoneyCrateImage] = useState<HTMLImageElement | null>(null);\n  const [zoom, setZoom] = useState(2); // Start at 2× zoomed-in\n  const [lastFrameTime, setLastFrameTime] = useState(Date.now());\n  \n  // Zoom parameters\n  const minZoom = 0.3; // Maximum zoom-out (0.3×)\n  const zoomSmoothing = 0.05; // How smooth the zoom transition is\n  \n  // Game constants - fullscreen\n  const [canvasSize, setCanvasSize] = useState({ width: window.innerWidth, height: window.innerHeight });\n  const [gameIsVisible, setGameIsVisible] = useState(!document.hidden);\n  const [hiddenAt, setHiddenAt] = useState<number | null>(null);\n  const [cashingOut, setCashingOut] = useState(false);\n  const [cashOutProgress, setCashOutProgress] = useState(0);\n  const [cashOutStartTime, setCashOutStartTime] = useState<number | null>(null);\n  const [qKeyPressed, setQKeyPressed] = useState(false);\n  const [showCongrats, setShowCongrats] = useState(false);\n  const [cashedOutAmount, setCashedOutAmount] = useState(0);\n  const [otherPlayers, setOtherPlayers] = useState<Array<{\n    id: string;\n    segments: Array<{ x: number; y: number }>;\n    color: string;\n    money: number;\n    cashingOut?: boolean;\n    cashOutProgress?: number;\n  }>>([]);\n  const [connectionStatus, setConnectionStatus] = useState('Connecting...');\n  const [myPlayerId, setMyPlayerId] = useState<string | null>(null);\n  const wsRef = useRef<WebSocket | null>(null);\n\n\n  // Function to drop money crates when snake dies (1 crate per mass unit)\n  const dropMoneyCrates = (playerMoney: number, snakeMass: number) => {\n    const crateCount = Math.floor(snakeMass); // 1 crate per mass unit\n    \n    if (crateCount <= 0) return;\n    \n    const crateValue = playerMoney / crateCount; // Split money evenly across all crates\n    \n    console.log(`💰 Dropping ${crateCount} money crates worth $${crateValue.toFixed(3)} each (total: $${playerMoney}, mass: ${snakeMass})`);\n    \n    // Get positions along the snake body\n    const positions = snake.getSnakeBodyPositions(crateCount);\n    \n    // Create money crates at each position\n    const newCrates: Food[] = [];\n    for (let i = 0; i < Math.min(crateCount, positions.length); i++) {\n      const pos = positions[i];\n      const crate: Food = {\n        id: `money_crate_${Date.now()}_${i}`,\n        x: pos.x,\n        y: pos.y,\n        radius: 6, // Larger to accommodate image\n        mass: 0, // No mass growth, just money\n        color: '#ffd700', // Gold color for money\n        vx: 0,\n        vy: 0,\n        wobbleOffset: Math.random() * Math.PI * 2,\n        isMoneyCrate: true,\n        moneyValue: crateValue\n      };\n      newCrates.push(crate);\n    }\n    \n    // Add all crates to the foods array\n    setFoods(currentFoods => [...currentFoods, ...newCrates]);\n    \n    // Send money crates to server for broadcasting to other players\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      newCrates.forEach(crate => {\n        wsRef.current!.send(JSON.stringify({\n          type: 'moneyCrate',\n          crate: crate\n        }));\n      });\n    }\n  };\n\n\n\n  // Load background image\n  useEffect(() => {\n    const img = new Image();\n    img.src = '/backggorun.png';\n    img.onload = () => {\n      console.log('Background image loaded successfully');\n      setBackgroundImage(img);\n    };\n    img.onerror = (e) => {\n      console.error('Failed to load background image:', e);\n    };\n  }, []);\n\n  // Load money crate image\n  useEffect(() => {\n    const img = new Image();\n    img.src = moneyCrateImageSrc;\n    img.onload = () => {\n      console.log('Money crate image loaded successfully');\n      setMoneyCrateImage(img);\n    };\n    img.onerror = (e) => {\n      console.error('Failed to load money crate image:', e);\n    };\n  }, []);\n\n\n\n\n\n\n\n  // Handle canvas resize for fullscreen\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      setCanvasSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n\n    updateCanvasSize();\n    window.addEventListener('resize', updateCanvasSize);\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n\n  // Prevent browser zoom\n  useEffect(() => {\n    const preventZoom = (e: WheelEvent | KeyboardEvent) => {\n      if ('ctrlKey' in e && e.ctrlKey) {\n        e.preventDefault();\n        return false;\n      }\n      if ('metaKey' in e && e.metaKey) {\n        e.preventDefault();\n        return false;\n      }\n    };\n\n    const preventKeyboardZoom = (e: KeyboardEvent) => {\n      if ((e.ctrlKey || e.metaKey) && (e.key === '+' || e.key === '-' || e.key === '=' || e.key === '0')) {\n        e.preventDefault();\n        return false;\n      }\n    };\n\n    document.addEventListener('wheel', preventZoom, { passive: false });\n    document.addEventListener('keydown', preventKeyboardZoom, { passive: false });\n    \n    return () => {\n      document.removeEventListener('wheel', preventZoom);\n      document.removeEventListener('keydown', preventKeyboardZoom);\n    };\n  }, []);\n\n\n\n  // Simple tab visibility handling - return to home when tab becomes inactive\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (document.hidden && gameStarted) {\n        console.log('⏸️ Tab became hidden, instantly returning to home page');\n        \n        // Instantly return to home page when tab becomes inactive\n        setGameStarted(false);\n        setGameOver(false);\n        gameOverRef.current = false;\n        \n        // Hide snake immediately\n        snakeVisibleRef.current = false;\n        setSnakeVisible(false);\n        \n        // Clean up WebSocket connection\n        if (wsRef.current) {\n          console.log('Cleaning up WebSocket connection...');\n          wsRef.current.close();\n          wsRef.current = null;\n        }\n        \n        // Navigate back to home page\n        window.history.pushState({}, '', '/');\n        window.dispatchEvent(new PopStateEvent('popstate'));\n        \n        // Clear snake data\n        setTimeout(() => {\n          snake.visibleSegments = [];\n          snake.segmentTrail = [];\n          snake.totalMass = 0;\n          snake.clearSnakeOnDeath();\n        }, 0);\n        \n        console.log('🏠 Returned to home page due to tab switch');\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, [gameStarted]);\n\n  // Initialize food system when game starts\n  useEffect(() => {\n    if (!gameStarted) return;\n    \n    // Clear any local game state - server provides everything except food (client-side)\n    setBotSnakes([]);\n    \n    // Initialize food particles\n    const initialFoods: Food[] = [];\n    for (let i = 0; i < FOOD_COUNT; i++) {\n      initialFoods.push(createFood(`food_${i}`));\n    }\n    setFoods(initialFoods);\n    \n    console.log(\"Game started - initialized\", FOOD_COUNT, \"food particles\");\n  }, [gameStarted]);\n\n  // WebSocket connection for real multiplayer\n  useEffect(() => {\n    if (!gameStarted) return;\n\n    console.log(`Connecting to multiplayer server room ${roomId}...`);\n    \n    const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsHost = window.location.host;\n    const socket = new WebSocket(`${wsProtocol}//${wsHost}/ws?room=${roomId}&region=${region}`);\n    \n    wsRef.current = socket;\n\n    socket.onopen = () => {\n      console.log(\"Connected to multiplayer server!\");\n      console.log(\"WebSocket readyState:\", socket.readyState);\n      setConnectionStatus('Connected');\n    };\n\n    socket.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        if (data.type === 'players') {\n          // Filter out our own player data and update others\n          const filteredPlayers = data.players.filter((p: any) => \n            p.id !== myPlayerId && p.segments.length > 0\n          );\n          // Use server data directly to avoid position mismatch\n          setOtherPlayers(filteredPlayers);\n          console.log(`Received ${data.players.length} total players, showing ${filteredPlayers.length} others`);\n        } else if (data.type === 'welcome') {\n          setMyPlayerId(data.playerId);\n          console.log(`My player ID: ${data.playerId} in room ${data.roomId || roomId}`);\n        } else if (data.type === 'gameWorld') {\n          setServerBots(data.bots || []);\n          \n          // Update server players with interpolation data\n          const currentTime = Date.now();\n          setServerPlayers(data.players || []);\n          \n          // Update interpolation data for smooth movement\n          setPlayerInterpolationData(currentMap => {\n            const newMap = new Map(currentMap);\n            \n            (data.players || []).forEach((player: any) => {\n              if (player.id !== myPlayerId && player.segments && player.segments.length > 0) {\n                const existing = newMap.get(player.id);\n                \n                if (existing) {\n                  // Update target and reset interpolation\n                  newMap.set(player.id, {\n                    lastUpdate: currentTime,\n                    currentSegments: existing.currentSegments.length > 0 ? existing.currentSegments : player.segments,\n                    targetSegments: player.segments,\n                    interpolationProgress: 0\n                  });\n                } else {\n                  // New player\n                  newMap.set(player.id, {\n                    lastUpdate: currentTime,\n                    currentSegments: player.segments,\n                    targetSegments: player.segments,\n                    interpolationProgress: 1\n                  });\n                }\n              }\n            });\n            \n            return newMap;\n          });\n          \n          // Food is handled client-side, not synced across players\n          console.log(`Room ${data.roomId || roomId}: Received shared world: ${data.bots?.length} bots, ${data.players?.length} players, ${foods.length} food`);\n          if (data.players && data.players.length > 0 && Math.random() < 0.1) {\n            data.players.forEach((player: any, idx: number) => {\n              console.log(`Player ${idx}: id=${player.id}, segments=${player.segments?.length || 0}, color=${player.color}`);\n            });\n          }\n          \n          // Force immediate re-render for proper snake body display with eyes\n          if (canvasRef.current) {\n            // Trigger multiple renders to ensure eyes appear immediately\n            for (let i = 0; i < 3; i++) {\n              window.requestAnimationFrame(() => {\n                // Multiple redraws ensure all elements render properly\n              });\n            }\n          }\n        } else if (data.type === 'boostFood') {\n          // Received boost food from another player - add it to our local food array\n          console.log(`🍕 Received boost food from player ${data.playerId}:`, data.food);\n          // Ensure the boost food has an expiration time if not already set\n          const boostFood = { \n            ...data.food, \n            expiresAt: data.food.expiresAt || (Date.now() + 10000),\n            opacity: data.food.opacity || 1.0 // Start with full opacity\n          };\n          setFoods(currentFoods => {\n            console.log(`🍕 Adding boost food to foods array. Current count: ${currentFoods.length}`);\n            return [...currentFoods, boostFood];\n          });\n        } else if (data.type === 'moneyCrate') {\n          // Received money crate from another player's death\n          console.log(`💰 Received money crate from player ${data.playerId}:`, data.crate);\n          setFoods(currentFoods => {\n            console.log(`💰 Adding money crate to foods array. Current count: ${currentFoods.length}`);\n            return [...currentFoods, data.crate];\n          });\n        } else if (data.type === 'moneyCrateRemoved') {\n          console.log(`💰 CLIENT: Money crate ${data.crateId} was collected by ${data.collectedBy}`);\n          // Remove money crate from foods array\n          setFoods(currentFoods => {\n            const filtered = currentFoods.filter(food => food.id !== data.crateId);\n            console.log(`💰 Removed money crate ${data.crateId}. Foods count: ${currentFoods.length} -> ${filtered.length}`);\n            return filtered;\n          });\n        } else if (data.type === 'cashingOut') {\n          // Update other player's cash-out status\n          setOtherPlayers(current => \n            current.map(player => \n              player.id === data.playerId \n                ? { ...player, cashingOut: true, cashOutProgress: data.progress }\n                : player\n            )\n          );\n        } else if (data.type === 'cashOutComplete' || data.type === 'cashOutCancelled') {\n          // Remove cash-out status from other player\n          setOtherPlayers(current => \n            current.map(player => \n              player.id === data.playerId \n                ? { ...player, cashingOut: false, cashOutProgress: 0 }\n                : player\n            )\n          );\n        } else if (data.type === 'death') {\n          console.log(`💀 CLIENT RECEIVED DEATH MESSAGE: ${data.reason} - crashed into ${data.crashedInto}`);\n          // Server detected our collision - instantly return to home screen\n          console.log(`💀 SERVER DEATH - Instant return to home`);\n          \n          // Calculate time alive in seconds\n          const timeAlive = gameStartTime ? Math.floor((Date.now() - gameStartTime) / 1000) : 0;\n          \n          // Store game over data for home page\n          localStorage.setItem('gameOverData', JSON.stringify({\n            finalMass: snake.totalMass,\n            timeAlive: timeAlive\n          }));\n          \n          // Hide snake first\n          snakeVisibleRef.current = false;\n          setSnakeVisible(false);\n          \n          // No Service Worker cleanup needed\n          \n          // Instantly return to home screen - no fade, no game over screen\n          console.log(`🏠 Instantly returning to home screen after server death`);\n          setGameStarted(false);\n          setGameOver(false);\n          gameOverRef.current = false;\n          snakeFadingRef.current = false;\n          setSnakeFading(false);\n          \n          // Navigate back to home page\n          window.history.pushState({}, '', '/');\n          window.dispatchEvent(new PopStateEvent('popstate'));\n          \n          // Clear snake data after state updates\n          setTimeout(() => {\n            snake.visibleSegments = [];\n            snake.segmentTrail = [];\n            snake.totalMass = 0;\n            snake.clearSnakeOnDeath();\n          }, 0);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n\n    socket.onclose = (event) => {\n      console.log(\"Disconnected from multiplayer server\");\n      console.log(\"Close event:\", event.code, event.reason);\n      setConnectionStatus('Disconnected');\n      wsRef.current = null;\n      \n      // Auto-reconnect after 2 seconds if not a normal closure\n      if (event.code !== 1000 && gameStarted) {\n        console.log(\"Attempting auto-reconnect in 2 seconds...\");\n        setConnectionStatus('Reconnecting');\n        setTimeout(() => {\n          if (gameStarted && !wsRef.current) {\n            console.log(\"Auto-reconnecting to multiplayer server...\");\n            // Create new WebSocket connection\n            const newSocket = new WebSocket(`${wsProtocol}//${wsHost}/ws?room=${roomId}`);\n            wsRef.current = newSocket;\n            \n            // Set up handlers for new connection\n            newSocket.onopen = () => {\n              console.log(\"Reconnected to multiplayer server!\");\n              setConnectionStatus('Connected');\n            };\n            newSocket.onmessage = socket.onmessage;\n            newSocket.onclose = socket.onclose;\n            newSocket.onerror = socket.onerror;\n          }\n        }, 2000);\n      }\n    };\n\n    socket.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setConnectionStatus('Connection Error');\n    };\n\n    return () => {\n      console.log(\"Cleaning up WebSocket connection...\");\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        socket.close();\n      }\n    };\n  }, [gameStarted, roomId]); // Include roomId to reconnect when room changes\n\n  // Send player data to server\n  useEffect(() => {\n    if (!gameStarted || !wsRef.current || wsRef.current.readyState !== WebSocket.OPEN) {\n      console.log(`Not sending updates: gameStarted=${gameStarted}, wsRef=${!!wsRef.current}, readyState=${wsRef.current?.readyState}`);\n      return;\n    }\n\n    console.log(`Starting position updates - snake has ${snake.visibleSegments.length} segments`);\n    \n    const sendInterval = setInterval(() => {\n      // Stop sending updates immediately if game is over\n      if (gameOverRef.current) {\n        console.log(`🛑 Stopped sending updates: gameOver=${gameOverRef.current}`);\n        return;\n      }\n      \n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN && snake.visibleSegments.length > 0) {\n        const updateData = {\n          type: 'update',\n          segments: snake.visibleSegments.slice(0, 100).map(seg => ({ x: seg.x, y: seg.y })), // Send up to 100 segments max\n          color: '#d55400',\n          money: snake.money,\n          totalMass: snake.totalMass,\n          segmentRadius: snake.getSegmentRadius(),\n          visibleSegmentCount: snake.visibleSegments.length\n        };\n        // Reduced logging for performance - only log every 60th update\n        if (Date.now() % 4000 < 33) {\n          console.log(`Sending update with ${updateData.segments.length} segments to server (snake total visible: ${snake.visibleSegments.length}, mass: ${snake.totalMass.toFixed(1)}, trail: ${snake.segmentTrail.length})`);\n        }\n        wsRef.current.send(JSON.stringify(updateData));\n      } else {\n        console.log(`Skipping update: wsReadyState=${wsRef.current?.readyState}, segments=${snake.visibleSegments.length}`);\n      }\n    }, 33); // Send updates every 33ms (~30 FPS) for much smoother multiplayer\n\n    return () => {\n      console.log('Clearing position update interval');\n      clearInterval(sendInterval);\n    };\n  }, [gameStarted, wsRef.current?.readyState, gameOver]);\n\n  // Mouse tracking\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const rect = canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      \n      // Calculate direction from screen center to mouse (Slither.io style)\n      const directionX = mouseX - canvasSize.width / 2;\n      const directionY = mouseY - canvasSize.height / 2;\n      \n      // Normalize the direction vector\n      const magnitude = Math.sqrt(directionX * directionX + directionY * directionY);\n      if (magnitude > 0) {\n        setMouseDirection({\n          x: directionX / magnitude,\n          y: directionY / magnitude\n        });\n      }\n    };\n\n    canvas.addEventListener('mousemove', handleMouseMove);\n    return () => canvas.removeEventListener('mousemove', handleMouseMove);\n  }, [canvasSize]);\n\n  // Boost controls and cash-out\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // Prevent key repeat events\n      if (e.repeat) return;\n      \n      if (e.key === 'Shift' || e.code === 'ShiftLeft' || e.code === 'ShiftRight') {\n        setIsBoosting(true);\n        snake.setBoost(true);\n      } else if (e.key.toLowerCase() === 'q') {\n        setQKeyPressed(true);\n        if (!cashingOut) {\n          // Start cash-out process only if Q is pressed\n          setCashingOut(true);\n          setCashOutStartTime(Date.now());\n          setCashOutProgress(0);\n        }\n      }\n    };\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n      if (e.key === 'Shift' || e.code === 'ShiftLeft' || e.code === 'ShiftRight') {\n        setIsBoosting(false);\n        snake.setBoost(false);\n      } else if (e.key.toLowerCase() === 'q') {\n        setQKeyPressed(false);\n        // Cancel cash-out process when Q is released\n        if (cashingOut) {\n          console.log('Cash-out cancelled - Q key released');\n          \n          // Send cancellation message to other players\n          if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n            wsRef.current.send(JSON.stringify({\n              type: 'cashOutCancelled',\n              playerId: myPlayerId\n            }));\n          }\n        }\n        setCashingOut(false);\n        setCashOutProgress(0);\n        setCashOutStartTime(null);\n      }\n    };\n\n    const handleMouseDown = () => {\n      setIsBoosting(true);\n      snake.setBoost(true);\n    };\n\n    const handleMouseUp = () => {\n      setIsBoosting(false);\n      snake.setBoost(false);\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    window.addEventListener('mousedown', handleMouseDown);\n    window.addEventListener('mouseup', handleMouseUp);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n      window.removeEventListener('mousedown', handleMouseDown);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [snake]);\n\n  // Game loop\n  useEffect(() => {\n    if (!gameStarted) return; // Don't start game loop until loading is complete\n    \n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    let animationId: number;\n    \n    // Apply snake catch-up movement when tab becomes visible again\n    const applySnakeCatchUp = (deltaSeconds: number) => {\n      if (gameOver) return;\n      \n      const speed = snake.isBoosting ? (snake.baseSpeed * snake.boostMultiplier) : snake.baseSpeed;\n      const distance = speed * deltaSeconds;\n      \n      // Move snake forward based on time that passed while tab was hidden\n      snake.head.x += Math.cos(snake.currentAngle) * distance;\n      snake.head.y += Math.sin(snake.currentAngle) * distance;\n      \n      // Add trail points for the movement that happened while away\n      const numTrailPoints = Math.floor(deltaSeconds * 60); // Approximate trail points\n      for (let i = 0; i < numTrailPoints; i++) {\n        const progress = i / numTrailPoints;\n        const x = snake.head.x - Math.cos(snake.currentAngle) * distance * (1 - progress);\n        const y = snake.head.y - Math.sin(snake.currentAngle) * distance * (1 - progress);\n        snake.segmentTrail.unshift({ x, y });\n      }\n      \n      // Update visible segments after catch-up movement\n      snake.updateVisibleSegments();\n    };\n    \n    // Track when tab becomes hidden/visible - instantly return to home when tab becomes inactive\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        console.log('⏸️ Tab became hidden, instantly returning to home page');\n        \n        // Instantly return to home page when tab becomes inactive\n        setGameStarted(false);\n        setGameOver(false);\n        gameOverRef.current = false;\n        \n        // Hide snake immediately\n        snakeVisibleRef.current = false;\n        setSnakeVisible(false);\n        \n        // Clean up WebSocket connection\n        if (wsRef.current) {\n          wsRef.current.close();\n          wsRef.current = null;\n        }\n        \n        // Navigate back to home page\n        window.history.pushState({}, '', '/');\n        window.dispatchEvent(new PopStateEvent('popstate'));\n        \n        // Clear snake data\n        snake.visibleSegments = [];\n        snake.segmentTrail = [];\n        snake.totalMass = 0;\n        snake.clearSnakeOnDeath();\n        \n        console.log('🏠 Returned to home page due to tab switch');\n      }\n      setGameIsVisible(!document.hidden);\n    };\n    \n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    const gameLoop = () => {\n      // Calculate delta time for smooth growth processing\n      const currentTime = Date.now();\n      const deltaTime = Math.min((currentTime - lastFrameTime) / 1000, 0.05); // Cap at 50ms (20fps minimum)\n      setLastFrameTime(currentTime);\n      \n      // Process growth at 10 mass per second rate\n      snake.processGrowth(deltaTime);\n      \n      // Move snake - disable control when cashing out\n      if (cashingOut) {\n        // Snake moves in straight line when cashing out (no player control)\n        snake.move(Math.cos(snake.currentAngle), Math.sin(snake.currentAngle));\n      } else {\n        // Normal mouse control\n        snake.move(mouseDirection.x, mouseDirection.y);\n      }\n\n      // Bot AI disabled - bots controlled by server\n\n      // Update cash-out progress - only if Q is still being held\n      if (cashingOut && cashOutStartTime && qKeyPressed) {\n        const elapsed = currentTime - cashOutStartTime;\n        const progress = Math.min(elapsed / 3000, 1); // 3 seconds = 100%\n        setCashOutProgress(progress);\n        \n        // Send cash-out progress to other players every frame for smooth updates\n        if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n          wsRef.current.send(JSON.stringify({\n            type: 'cashingOut',\n            progress: progress,\n            playerId: myPlayerId\n          }));\n        }\n        \n        // Complete cash-out after 3 seconds\n        if (progress >= 1) {\n          const amount = snake.money;\n          console.log(`Cashed out $${amount.toFixed(2)}! Returning to home page.`);\n          \n          // Send completion message to other players\n          if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n            wsRef.current.send(JSON.stringify({\n              type: 'cashOutComplete',\n              playerId: myPlayerId\n            }));\n          }\n          \n          // Clean up game state\n          setGameStarted(false);\n          setGameOver(false);\n          gameOverRef.current = false;\n          \n          // Hide snake\n          snakeVisibleRef.current = false;\n          setSnakeVisible(false);\n          \n          // Clean up WebSocket connection\n          if (wsRef.current) {\n            console.log('Cleaning up WebSocket connection after cash out...');\n            wsRef.current.close();\n            wsRef.current = null;\n          }\n          \n          // Reset cash-out state\n          setCashingOut(false);\n          setCashOutProgress(0);\n          setCashOutStartTime(null);\n          setQKeyPressed(false);\n          \n          // Store celebration data for home page\n          localStorage.setItem('cashOutCelebration', JSON.stringify({ amount }));\n          \n          // Navigate back to home page instantly\n          window.history.pushState({}, '', '/');\n          window.dispatchEvent(new PopStateEvent('popstate'));\n          \n          // Clear snake data\n          setTimeout(() => {\n            snake.visibleSegments = [];\n            snake.segmentTrail = [];\n            snake.totalMass = 0;\n            snake.money = 1.00; // Reset to starting money\n            snake.clearSnakeOnDeath();\n          }, 0);\n          \n          console.log('🏠 Returned to home page after cash out');\n        }\n      } else if (cashingOut && !qKeyPressed) {\n        // Q was released, cancel cash-out  \n        console.log('Cash-out cancelled - Q key released during game loop');\n        \n        // Send cancellation message to other players\n        if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n          wsRef.current.send(JSON.stringify({\n            type: 'cashOutCancelled',\n            playerId: myPlayerId\n          }));\n        }\n        \n        setCashingOut(false);\n        setCashOutProgress(0);\n        setCashOutStartTime(null);\n      }\n\n      // Update interpolation for smooth player movement\n      setPlayerInterpolationData(currentMap => {\n        const newMap = new Map(currentMap);\n        const currentTime = Date.now();\n        \n        newMap.forEach((interpData, playerId) => {\n          const timeSinceUpdate = currentTime - interpData.lastUpdate;\n          const interpolationDuration = 100; // 100ms interpolation window\n          \n          if (timeSinceUpdate < interpolationDuration && interpData.interpolationProgress < 1) {\n            const progress = Math.min(1, timeSinceUpdate / interpolationDuration);\n            \n            // Interpolate between current and target positions\n            const interpolatedSegments = interpData.currentSegments.map((currentSeg, index) => {\n              const targetSeg = interpData.targetSegments[index];\n              if (!targetSeg) return currentSeg;\n              \n              return {\n                x: currentSeg.x + (targetSeg.x - currentSeg.x) * progress,\n                y: currentSeg.y + (targetSeg.y - currentSeg.y) * progress\n              };\n            });\n            \n            newMap.set(playerId, {\n              ...interpData,\n              currentSegments: interpolatedSegments,\n              interpolationProgress: progress\n            });\n          }\n        });\n        \n        return newMap;\n      });\n\n      // Update food physics and check consumption\n      const allSnakes = [\n        { head: snake.head, totalMass: snake.totalMass },\n        ...botSnakes.map(bot => ({ head: bot.head, totalMass: bot.totalMass })),\n        ...serverBots.map(bot => ({ head: bot.head, totalMass: bot.totalMass || 10 })),\n        ...serverPlayers.map(player => ({ \n          head: player.segments?.[0] || { x: 0, y: 0 }, \n          totalMass: player.totalMass || 10 \n        }))\n      ].filter(s => s.head.x !== undefined && s.head.y !== undefined);\n\n      // Update food gravitational physics every frame for better responsiveness\n      setFoods(currentFoods => {\n        // Reduced debug frequency\n        if (Math.random() < 0.001) {\n          console.log(`🔄 Updating ${currentFoods.length} food particles`);\n        }\n        \n        // Focus only on player snake for attraction (ignore multiplayer snakes for now)\n        const playerOnlySnakes = [{ head: snake.head, totalMass: snake.totalMass }];\n        \n        // Update opacity for boost food and remove expired ones\n        const currentTime = Date.now();\n        const nonExpiredFoods = currentFoods.filter(food => {\n          if (food.expiresAt && currentTime > food.expiresAt) {\n            console.log(`🕒 Boost food ${food.id} expired and removed`);\n            return false;\n          }\n          return true;\n        }).map(food => {\n          // Calculate fading opacity for boost food\n          if (food.expiresAt) {\n            const timeRemaining = food.expiresAt - currentTime;\n            const totalLifetime = 10000; // 10 seconds\n            const opacity = Math.max(0.1, timeRemaining / totalLifetime); // Fade from 1.0 to 0.1\n            return { ...food, opacity };\n          }\n          return food;\n        });\n        \n        const updatedFoods = nonExpiredFoods.map(food => \n          updateFoodGravity(food, playerOnlySnakes)\n        );\n        \n        // Check food consumption by player snake only\n        const consumedFoodIds: string[] = [];\n        for (const food of updatedFoods) {\n          const distToSnake = Math.sqrt(\n            (food.x - snake.head.x) ** 2 + (food.y - snake.head.y) ** 2\n          );\n          \n          if (distToSnake < FOOD_CONSUMPTION_RADIUS) {\n            // Handle different types of food\n            if (food.isMoneyCrate && food.moneyValue) {\n              // Snake eats money crate - add both money AND mass from dead snake\n              snake.money += food.moneyValue;\n              const massGain = 0.3; // Same mass gain as regular food particles\n              snake.eatFood(massGain);\n              console.log(`💰 Collected money crate worth $${food.moneyValue} + ${massGain} mass! Total money: $${snake.money.toFixed(2)}`);\n              \n              // Notify server about money crate collection for multiplayer sync\n              if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n                wsRef.current.send(JSON.stringify({\n                  type: 'moneyCrateCollected',\n                  crateId: food.id\n                }));\n                console.log(`💰 Notified server about collecting money crate ${food.id}`);\n              }\n            } else {\n              // Regular food or boost food - add mass\n              snake.eatFood(food.mass);\n            }\n            consumedFoodIds.push(food.id);\n          }\n        }\n        \n        // Remove consumed food and create new ones\n        let filteredFoods = updatedFoods.filter(food => !consumedFoodIds.includes(food.id));\n        \n        // Spawn new food to maintain constant count\n        const newFoodCount = FOOD_COUNT - filteredFoods.length;\n        for (let i = 0; i < newFoodCount; i++) {\n          filteredFoods.push(createFood(`food_${Date.now()}_${i}`));\n        }\n        \n        return filteredFoods;\n      });\n\n      // Check circular map boundaries (death barrier) - using eye positions\n      const eyePositions = snake.getEyePositions();\n      let hitBoundary = false;\n      \n      for (const eye of eyePositions) {\n        const distanceFromCenter = Math.sqrt(\n          (eye.x - MAP_CENTER_X) ** 2 + (eye.y - MAP_CENTER_Y) ** 2\n        );\n        if (distanceFromCenter > MAP_RADIUS) {\n          hitBoundary = true;\n          break;\n        }\n      }\n      \n      if (hitBoundary) {\n        console.log(`💀 HIT DEATH BARRIER - Instant return to home`);\n        \n        // Calculate time alive in seconds\n        const timeAlive = gameStartTime ? Math.floor((Date.now() - gameStartTime) / 1000) : 0;\n        \n        // Store game over data for home page\n        localStorage.setItem('gameOverData', JSON.stringify({\n          finalMass: snake.totalMass,\n          timeAlive: timeAlive\n        }));\n        \n        // Drop money crates before clearing snake\n        dropMoneyCrates(snake.money, snake.totalMass);\n        \n        // Hide snake first, then clear data\n        snakeVisibleRef.current = false;\n        setSnakeVisible(false);\n        \n        // Instantly return to home screen - no fade, no game over screen\n        console.log(`🏠 Instantly returning to home screen after hitting barrier`);\n        setGameStarted(false);\n        setGameOver(false);\n        gameOverRef.current = false;\n        snakeFadingRef.current = false;\n        setSnakeFading(false);\n        \n        // Navigate back to home page\n        window.history.pushState({}, '', '/');\n        window.dispatchEvent(new PopStateEvent('popstate'));\n        \n        // Clear snake data after state updates\n        setTimeout(() => {\n          snake.visibleSegments = [];\n          snake.segmentTrail = [];\n          snake.totalMass = 0;\n          snake.clearSnakeOnDeath();\n        }, 0);\n        \n        return;\n      }\n\n      // Check collision between player snake eyes and bot snakes\n      const playerEyePositions = snake.getEyePositions();\n      let hitBot = false;\n      \n      for (const bot of botSnakes) {\n        // Calculate bot's current radius based on mass (caps at 5x width)\n        const botBaseRadius = 8;\n        const maxScale = 5;\n        const botScaleFactor = Math.min(1 + (bot.totalMass - 10) / 100, maxScale);\n        const botRadius = botBaseRadius * botScaleFactor;\n        \n        for (const segment of bot.visibleSegments) {\n          // Check each eye against bot segments\n          for (const eye of playerEyePositions) {\n            const dist = Math.sqrt((eye.x - segment.x) ** 2 + (eye.y - segment.y) ** 2);\n            if (dist < eye.size + botRadius) {\n              hitBot = true;\n              break;\n            }\n          }\n          if (hitBot) break;\n        }\n        if (hitBot) break;\n      }\n      \n      if (hitBot) {\n        console.log(`💀 HIT BOT SNAKE - Instant return to home`);\n        \n        // Calculate time alive in seconds\n        const timeAlive = gameStartTime ? Math.floor((Date.now() - gameStartTime) / 1000) : 0;\n        \n        // Store game over data for home page\n        localStorage.setItem('gameOverData', JSON.stringify({\n          finalMass: snake.totalMass,\n          timeAlive: timeAlive\n        }));\n        \n        // Drop money crates before clearing snake\n        dropMoneyCrates(snake.money, snake.totalMass);\n        \n        // Hide snake first, then clear data\n        snakeVisibleRef.current = false;\n        setSnakeVisible(false);\n        \n        // Instantly return to home screen - no fade, no game over screen\n        console.log(`🏠 Instantly returning to home screen after hitting bot`);\n        setGameStarted(false);\n        setGameOver(false);\n        gameOverRef.current = false;\n        snakeFadingRef.current = false;\n        setSnakeFading(false);\n        \n        // Navigate back to home page\n        window.history.pushState({}, '', '/');\n        window.dispatchEvent(new PopStateEvent('popstate'));\n        \n        // Clear snake data after state updates\n        setTimeout(() => {\n          snake.visibleSegments = [];\n          snake.segmentTrail = [];\n          snake.totalMass = 0;\n          snake.clearSnakeOnDeath();\n        }, 0);\n        \n        return;\n      }\n\n      // Check for head-on collisions between player and bot snakes\n      for (let i = botSnakes.length - 1; i >= 0; i--) {\n        const bot = botSnakes[i];\n        const playerEyePositions = snake.getEyePositions();\n        \n        // Calculate bot's current radius based on mass\n        const botBaseRadius = 8;\n        const maxScale = 5;\n        const botScaleFactor = Math.min(1 + (bot.totalMass - 10) / 100, maxScale);\n        const botRadius = botBaseRadius * botScaleFactor;\n        \n        // Check if player's eyes collide with bot's head (head-on collision)\n        let headOnCollision = false;\n        for (const eye of playerEyePositions) {\n          const dist = Math.sqrt((eye.x - bot.head.x) ** 2 + (eye.y - bot.head.y) ** 2);\n          if (dist < eye.size + botRadius) {\n            headOnCollision = true;\n            break;\n          }\n        }\n        \n        if (headOnCollision) {\n          console.log(`💀 HEAD-ON COLLISION WITH BOT - Instant return to home`);\n          // Drop money crates before clearing snake\n          dropMoneyCrates(snake.money, snake.totalMass);\n          \n          // Remove the bot\n          setBotSnakes(prevBots => prevBots.filter((_, index) => index !== i));\n          \n          // Spawn a new bot to replace the killed one\n          setTimeout(() => {\n            setBotSnakes(prevBots => [...prevBots, createBotSnake(`bot_${Date.now()}`)]);\n          }, 3000);\n          \n          // Hide snake first, then clear data\n          snakeVisibleRef.current = false;\n          setSnakeVisible(false);\n          \n          // Instantly return to home screen - no fade, no game over screen\n          console.log(`🏠 Instantly returning to home screen after head-on collision`);\n          setGameStarted(false);\n          setGameOver(false);\n          gameOverRef.current = false;\n          snakeFadingRef.current = false;\n          setSnakeFading(false);\n          \n          // Navigate back to home page\n          window.history.pushState({}, '', '/');\n          window.dispatchEvent(new PopStateEvent('popstate'));\n          \n          // Clear snake data after state updates\n          setTimeout(() => {\n            snake.visibleSegments = [];\n            snake.segmentTrail = [];\n            snake.totalMass = 0;\n            snake.clearSnakeOnDeath();\n          }, 0);\n          \n          return;\n        }\n      }\n      \n      // Check if player snake kills any bot snakes (excluding head segment)\n      for (let i = botSnakes.length - 1; i >= 0; i--) {\n        const bot = botSnakes[i];\n        const botBaseRadius = 8;\n        const maxScale = 5;\n        const botScaleFactor = Math.min(1 + (bot.totalMass - 10) / 100, maxScale);\n        const botRadius = botBaseRadius * botScaleFactor;\n        \n        // Check collision with snake body segments (skip first segment/head at index 0)\n        for (let j = 1; j < snake.visibleSegments.length; j++) {\n          const segment = snake.visibleSegments[j];\n          const dist = Math.sqrt((segment.x - bot.head.x) ** 2 + (segment.y - bot.head.y) ** 2);\n          if (dist < snake.getSegmentRadius() + botRadius) {\n            // Death food and money crates removed\n            \n            // Remove the killed bot\n            setBotSnakes(prevBots => prevBots.filter((_, index) => index !== i));\n            \n            // Spawn a new bot to replace the killed one\n            setTimeout(() => {\n              setBotSnakes(prevBots => [...prevBots, createBotSnake(`bot_${Date.now()}`)]);\n            }, 3000); // 3 second delay before respawn\n            \n            break;\n          }\n        }\n      }\n\n      // Bot food eating disabled - server handles all game logic\n      // setBotSnakes(prevBots => {\n      //   return prevBots.map(bot => {\n      //     // Server now handles bot food eating and respawning\n      //     return bot;\n      //   });\n      // });\n\n      // Food gravitation toward snake head (50px radius, 2x faster)\n      // Food system removed\n\n      // Food collision system removed\n\n      // Server food system removed\n\n      // Check for collisions with other players' snakes\n      for (const otherPlayer of otherPlayers) {\n        if (!otherPlayer.segments || otherPlayer.segments.length === 0) continue;\n        // Skip collision with dead players (check if they have any meaningful segments)\n        if (otherPlayer.isDead || otherPlayer.gameOver) continue;\n        // Skip players with very few segments (likely dead/disconnected)\n        if (otherPlayer.segments.length < 2) continue;\n        \n        for (const segment of otherPlayer.segments) {\n          const dist = Math.sqrt((snake.head.x - segment.x) ** 2 + (snake.head.y - segment.y) ** 2);\n          const collisionRadius = snake.getSegmentRadius() + 10; // Use standard segment radius\n          \n          if (dist < collisionRadius) {\n            // Player died - crash into another snake! Drop money crates first\n            console.log(`💀 CRASHED into player ${otherPlayer.id}! (segments: ${otherPlayer.segments.length}) - Instant return to home`);\n            \n            // Calculate time alive in seconds\n            const timeAlive = gameStartTime ? Math.floor((Date.now() - gameStartTime) / 1000) : 0;\n            \n            // Store game over data for home page\n            localStorage.setItem('gameOverData', JSON.stringify({\n              finalMass: snake.totalMass,\n              timeAlive: timeAlive\n            }));\n            \n            // Drop money crates BEFORE clearing\n            const currentMoney = snake.money || 1.0;\n            const currentMass = snake.totalMass || 6;\n            console.log(`💰 Dropping money crates: $${currentMoney}, mass: ${currentMass}`);\n            dropMoneyCrates(currentMoney, Math.max(currentMass, 1));\n            \n            // Hide snake first, then clear data\n            snakeVisibleRef.current = false;\n            setSnakeVisible(false);\n            \n            // Instantly return to home screen - no fade, no game over screen\n            console.log(`🏠 Instantly returning to home screen after death`);\n            setGameStarted(false);\n            setGameOver(false);\n            gameOverRef.current = false;\n            snakeFadingRef.current = false;\n            setSnakeFading(false);\n            \n            // Navigate back to home page\n            window.history.pushState({}, '', '/');\n            window.dispatchEvent(new PopStateEvent('popstate'));\n            \n            // Clear snake data after state updates\n            setTimeout(() => {\n              snake.visibleSegments = [];\n              snake.segmentTrail = [];\n              snake.totalMass = 0;\n              snake.clearSnakeOnDeath();\n            }, 0);\n            \n            return; // Stop the game loop\n          }\n        }\n      }\n\n      // Check for collisions with server players' snakes\n      for (const serverPlayer of serverPlayers) {\n        if (!serverPlayer.segments || serverPlayer.segments.length === 0) continue;\n        if (serverPlayer.id === myPlayerId) continue; // Skip self\n        // Skip collision with dead players\n        if (serverPlayer.isDead || serverPlayer.gameOver) continue;\n        // Skip players with very few segments (likely dead/disconnected) \n        if (serverPlayer.segments.length < 2) continue;\n        \n        for (const segment of serverPlayer.segments) {\n          const dist = Math.sqrt((snake.head.x - segment.x) ** 2 + (snake.head.y - segment.y) ** 2);\n          const collisionRadius = snake.getSegmentRadius() + (serverPlayer.segmentRadius || 10);\n          \n          if (dist < collisionRadius) {\n            // Player died - crash into another snake!\n            console.log(`💀 CRASHED into server player ${serverPlayer.id}! (segments: ${serverPlayer.segments.length}) - Instant return to home`);\n            \n            // Drop money crates BEFORE clearing\n            const currentMoney = snake.money || 1.0;\n            const currentMass = snake.totalMass || 6;\n            console.log(`💰 Dropping money crates: $${currentMoney}, mass: ${currentMass}`);\n            dropMoneyCrates(currentMoney, Math.max(currentMass, 1));\n            \n            // Hide snake first, then clear data\n            snakeVisibleRef.current = false;\n            setSnakeVisible(false);\n            \n            // Instantly return to home screen - no fade, no game over screen\n            console.log(`🏠 Instantly returning to home screen after death`);\n            setGameStarted(false);\n            setGameOver(false);\n            gameOverRef.current = false;\n            snakeFadingRef.current = false;\n            setSnakeFading(false);\n            \n            // Navigate back to home page\n            window.history.pushState({}, '', '/');\n            window.dispatchEvent(new PopStateEvent('popstate'));\n            \n            // Clear snake data after state updates\n            setTimeout(() => {\n              snake.visibleSegments = [];\n              snake.segmentTrail = [];\n              snake.totalMass = 0;\n              snake.clearSnakeOnDeath();\n            }, 0);\n            \n            return; // Stop the game loop\n          }\n        }\n      }\n\n      // Calculate target zoom based on snake segments (capped at 130 segments)\n      const segmentCount = snake.visibleSegments.length;\n      const maxSegmentZoom = 130;\n      const cappedSegmentCount = Math.min(segmentCount, maxSegmentZoom);\n      const zoomSteps = Math.floor(cappedSegmentCount / 5);\n      const targetZoom = Math.max(minZoom, 2.0 - zoomSteps * 0.03);\n      \n      // Smoothly interpolate toward target zoom\n      setZoom(prevZoom => prevZoom + (targetZoom - prevZoom) * zoomSmoothing);\n\n      // Clear canvas with background image pattern or dark fallback\n      if (backgroundImage) {\n        // Create repeating pattern from background image\n        const pattern = ctx.createPattern(backgroundImage, 'repeat');\n        if (pattern) {\n          ctx.fillStyle = pattern;\n          ctx.fillRect(0, 0, canvasSize.width, canvasSize.height);\n        }\n      } else {\n        // Fallback to solid color if image not loaded\n        ctx.fillStyle = '#15161b';\n        ctx.fillRect(0, 0, canvasSize.width, canvasSize.height);\n      }\n\n      // Save context for camera transform\n      ctx.save();\n\n      // Apply zoom and camera following snake head\n      ctx.translate(canvasSize.width / 2, canvasSize.height / 2);\n      ctx.scale(zoom, zoom);\n      ctx.translate(-snake.head.x, -snake.head.y);\n\n      // Draw background image across the full map area if loaded\n      if (backgroundImage) {\n        const mapSize = MAP_RADIUS * 2.5;\n        // Draw background image tiled across the entire game area\n        const pattern = ctx.createPattern(backgroundImage, 'repeat');\n        if (pattern) {\n          ctx.fillStyle = pattern;\n          ctx.fillRect(-mapSize, -mapSize, mapSize * 2, mapSize * 2);\n        }\n      }\n      \n      // Draw green overlay only outside the play area (death barrier region)\n      ctx.save();\n      \n      // Create a clipping path for the area outside the safe zone\n      const mapSize = MAP_RADIUS * 2.5;\n      ctx.beginPath();\n      ctx.rect(-mapSize, -mapSize, mapSize * 2, mapSize * 2); // Full map area\n      ctx.arc(MAP_CENTER_X, MAP_CENTER_Y, MAP_RADIUS, 0, Math.PI * 2, true); // Subtract safe zone (clockwise)\n      ctx.clip();\n      \n      // Fill only the clipped area (outside the circle) with green overlay\n      ctx.fillStyle = 'rgba(82, 164, 122, 0.4)'; // Semi-transparent green overlay\n      ctx.fillRect(-mapSize, -mapSize, mapSize * 2, mapSize * 2);\n      \n      ctx.restore();\n\n      // Draw thin death barrier line\n      ctx.strokeStyle = '#53d392';\n      ctx.lineWidth = 8;\n      ctx.beginPath();\n      ctx.arc(MAP_CENTER_X, MAP_CENTER_Y, MAP_RADIUS, 0, Math.PI * 2);\n      ctx.stroke();\n\n      // Draw food particles as solid circles with attraction indicators\n      ctx.save();\n      foods.forEach(food => {\n        // Only draw food within view distance for performance\n        const distanceToCamera = Math.sqrt(\n          (food.x - snake.head.x) ** 2 + (food.y - snake.head.y) ** 2\n        );\n        \n        if (distanceToCamera < 800) { // Only render food within 800px of snake\n          // Check if food should be attracted to player\n          const distanceToPlayer = Math.sqrt(\n            (food.x - snake.head.x) ** 2 + (food.y - snake.head.y) ** 2\n          );\n          const isAttracted = distanceToPlayer < FOOD_ATTRACTION_RADIUS;\n          \n          // Draw food with glow effect and optional opacity for fading boost food\n          ctx.save();\n          \n          // Apply opacity for boost food fading\n          if (food.opacity !== undefined) {\n            ctx.globalAlpha = food.opacity;\n          }\n          \n          // Special rendering for money crates with gentle wobbling\n          if (food.isMoneyCrate) {\n            // Gentle wobbling motion - much slower than boost food\n            const wobbleTime = Date.now() * 0.001 + food.wobbleOffset;\n            const wobbleX = Math.sin(wobbleTime) * 1.5; // Small horizontal wobble\n            const wobbleY = Math.cos(wobbleTime * 0.8) * 1; // Smaller vertical wobble\n            \n            const drawX = food.x + wobbleX;\n            const drawY = food.y + wobbleY;\n            \n            // Draw the money crate image if loaded (no glow, no pulsing)\n            if (moneyCrateImage) {\n              const imageSize = food.radius * 2 * 1.5; // 1.5x bigger visually (40% smaller than before)\n              ctx.drawImage(\n                moneyCrateImage,\n                drawX - imageSize / 2,\n                drawY - imageSize / 2,\n                imageSize,\n                imageSize\n              );\n            } else {\n              // Fallback: Draw main money crate (square-ish) with dollar sign - 1.5x bigger\n              const visualRadius = food.radius * 1.5;\n              ctx.fillStyle = '#ffd700';\n              ctx.fillRect(drawX - visualRadius, drawY - visualRadius, visualRadius * 2, visualRadius * 2);\n              \n              // Add dollar sign in the center - scale font size too\n              ctx.fillStyle = '#000000';\n              ctx.font = `${visualRadius}px Arial`;\n              ctx.textAlign = 'center';\n              ctx.textBaseline = 'middle';\n              ctx.fillText('$', drawX, drawY);\n            }\n          }\n          // Special rendering for boost food with pulsing effect\n          else if (food.isBoostFood || food.expiresAt) {\n            const pulseTime = Date.now() * 0.008;\n            const pulseScale = 1 + Math.sin(pulseTime) * 0.3;\n            const currentRadius = food.radius * pulseScale;\n            \n            // Create stronger glowing effect for boost food\n            ctx.shadowColor = food.color;\n            ctx.shadowBlur = 15;\n            ctx.shadowOffsetX = 0;\n            ctx.shadowOffsetY = 0;\n            \n            // Draw outer glow ring\n            ctx.fillStyle = food.color + '40'; // Semi-transparent\n            ctx.beginPath();\n            ctx.arc(food.x, food.y, currentRadius * 1.8, 0, Math.PI * 2);\n            ctx.fill();\n            \n            // Draw main food circle with pulse\n            ctx.fillStyle = food.color;\n            ctx.beginPath();\n            ctx.arc(food.x, food.y, currentRadius, 0, Math.PI * 2);\n            ctx.fill();\n            \n            // Add bright inner core\n            ctx.shadowBlur = 8;\n            ctx.fillStyle = '#ffffff';\n            ctx.beginPath();\n            ctx.arc(food.x, food.y, currentRadius * 0.4, 0, Math.PI * 2);\n            ctx.fill();\n          } else {\n            // Regular food rendering\n            // Create glowing effect with shadow\n            ctx.shadowColor = food.color;\n            ctx.shadowBlur = 8;\n            ctx.shadowOffsetX = 0;\n            ctx.shadowOffsetY = 0;\n            \n            // Draw main food circle\n            ctx.fillStyle = food.color;\n            ctx.beginPath();\n            ctx.arc(food.x, food.y, food.radius, 0, Math.PI * 2);\n            ctx.fill();\n            \n            // Add inner bright glow for more intensity\n            ctx.shadowBlur = 4;\n            ctx.fillStyle = food.color;\n            ctx.beginPath();\n            ctx.arc(food.x, food.y, food.radius * 0.7, 0, Math.PI * 2);\n            ctx.fill();\n          }\n          \n          ctx.restore();\n        }\n      });\n      ctx.restore();\n\n      // Draw only OTHER server players (exclude yourself) - limit rendering for performance\n      const otherServerPlayers = serverPlayers.filter(player => player.id !== myPlayerId);\n      // Only log every 30th frame to reduce console spam\n      if (currentTime % 30 === 0) {\n        console.log(`Drawing ${otherServerPlayers.length} other players (excluding self)`);\n      }\n      otherServerPlayers.forEach((serverPlayer, playerIndex) => {\n        if (serverPlayer.segments && serverPlayer.segments.length > 0) {\n          // Use interpolated segments for smooth movement if available\n          const interpData = playerInterpolationData.get(serverPlayer.id);\n          const fullSnakeBody = interpData && interpData.currentSegments.length > 0 \n            ? interpData.currentSegments \n            : serverPlayer.segments;\n          const spacedSegments = fullSnakeBody; // Use interpolated segments for smooth movement\n          \n          // Draw snake body with EXACT same styling as local snake\n          ctx.save();\n          \n          // Check if this player is cashing out\n          const cashingOutPlayer = otherPlayers.find(p => p.id === serverPlayer.id);\n          const isCashingOut = cashingOutPlayer?.cashingOut;\n          const cashOutProgress = cashingOutPlayer?.cashOutProgress || 0;\n          \n          // Add cash-out glow effect\n          if (isCashingOut) {\n            const glowIntensity = 0.3 + (cashOutProgress * 0.7);\n            const pulseIntensity = Math.sin(Date.now() * 0.01) * 0.3 + 0.7;\n            ctx.shadowColor = \"#ffd700\";\n            ctx.shadowBlur = 15 * glowIntensity * pulseIntensity;\n            ctx.shadowOffsetX = 0;\n            ctx.shadowOffsetY = 0;\n          } else {\n            // Add drop shadow when not boosting (like local snake)\n            ctx.shadowColor = \"rgba(0, 0, 0, 0.3)\";\n            ctx.shadowBlur = 6;\n            ctx.shadowOffsetX = 2;\n            ctx.shadowOffsetY = 2;\n          }\n          \n          // Use spaced segments for natural appearance\n          const segmentsToRender = spacedSegments.length;\n          \n          // Draw segments from tail to head for proper layering\n          for (let i = segmentsToRender - 1; i >= 0; i--) {\n            const segment = spacedSegments[i];\n            const segmentRadius = serverPlayer.segmentRadius || 10;\n            \n            ctx.fillStyle = serverPlayer.color || '#ff0000';\n            ctx.beginPath();\n            ctx.arc(segment.x, segment.y, segmentRadius, 0, Math.PI * 2);\n            ctx.fill();\n            \n            // Add cash-out outline\n            if (isCashingOut) {\n              const glowIntensity = 0.3 + (cashOutProgress * 0.7);\n              ctx.strokeStyle = '#ffd700';\n              ctx.lineWidth = 2 * glowIntensity;\n              ctx.beginPath();\n              ctx.arc(segment.x, segment.y, segmentRadius + 1, 0, Math.PI * 2);\n              ctx.stroke();\n            }\n          }\n          \n          // Reduced logging for performance\n          if (currentTime % 60 === 0) {\n            console.log(`Rendered snake ${serverPlayer.id} with ${segmentsToRender}/${fullSnakeBody.length} exact server segments`);\n          }\n          \n          ctx.restore();\n          \n          // Draw rotated square eyes exactly like local snake\n          if (spacedSegments.length > 0) {\n            const head = spacedSegments[0];\n            \n            // Calculate movement direction from first two segments\n            let movementAngle = 0;\n            if (spacedSegments.length > 1) {\n              const dx = head.x - spacedSegments[1].x;\n              const dy = head.y - spacedSegments[1].y;\n              movementAngle = Math.atan2(dy, dx);\n            }\n            \n            // Cap eye scaling at 100 segments for multiplayer snakes with balanced proportions\n            const MAX_SEGMENTS = 100;\n            const currentSegments = Math.min(fullSnakeBody.length, MAX_SEGMENTS);\n            const segmentProgress = currentSegments / MAX_SEGMENTS;\n            const maxEyeScale = 2.2; // Balanced scaling for visibility\n            const baseEyeScale = 1 + (segmentProgress * (maxEyeScale - 1));\n            \n            const baseRadius = 10;\n            const cappedRadius = baseRadius * baseEyeScale;\n            const eyeDistance = cappedRadius * 0.40; // Balanced distance from center\n            const eyeSize = cappedRadius * 0.28; // Balanced size relative to head\n            const pupilSize = cappedRadius * 0.13; // Balanced pupil size\n            \n            // Eye positions perpendicular to movement direction\n            const eye1X = head.x + Math.cos(movementAngle + Math.PI/2) * eyeDistance;\n            const eye1Y = head.y + Math.sin(movementAngle + Math.PI/2) * eyeDistance;\n            const eye2X = head.x + Math.cos(movementAngle - Math.PI/2) * eyeDistance;\n            const eye2Y = head.y + Math.sin(movementAngle - Math.PI/2) * eyeDistance;\n            \n            // Draw first eye with rotation\n            ctx.save();\n            ctx.translate(eye1X, eye1Y);\n            ctx.rotate(movementAngle);\n            ctx.fillStyle = 'white';\n            ctx.fillRect(-eyeSize, -eyeSize, eyeSize * 2, eyeSize * 2);\n            \n            // Draw first pupil looking forward\n            const pupilOffset = eyeSize * 0.4; // Scale pupil offset with eye size\n            ctx.fillStyle = 'black';\n            ctx.fillRect(\n              pupilOffset - pupilSize,\n              0 - pupilSize,\n              pupilSize * 2, \n              pupilSize * 2\n            );\n            ctx.restore();\n            \n            // Draw second eye with rotation\n            ctx.save();\n            ctx.translate(eye2X, eye2Y);\n            ctx.rotate(movementAngle);\n            ctx.fillStyle = 'white';\n            ctx.fillRect(-eyeSize, -eyeSize, eyeSize * 2, eyeSize * 2);\n            \n            // Draw second pupil looking forward\n            ctx.fillStyle = 'black';\n            ctx.fillRect(\n              pupilOffset - pupilSize,\n              0 - pupilSize,\n              pupilSize * 2, \n              pupilSize * 2\n            );\n            ctx.restore();\n          }\n          \n          // Draw player money above head with proper scaling and font\n          if (fullSnakeBody.length > 0) {\n            const head = fullSnakeBody[0];\n            const segmentRadius = serverPlayer.segmentRadius || 10;\n            \n            // Calculate scale factor based on segment radius, capped at 4 mass equivalent\n            const baseRadius = 10;\n            const maxRadius = 10.2; // Equivalent to ~4 mass\n            const cappedRadius = Math.min(segmentRadius, maxRadius);\n            const scaleFactor = Math.max(0.8, cappedRadius / baseRadius);\n            \n            ctx.save();\n            ctx.font = `${Math.floor(10 * scaleFactor)}px 'Press Start 2P', monospace`;\n            ctx.fillStyle = \"#ffffff\";\n            ctx.strokeStyle = \"#000000\";\n            ctx.lineWidth = 3 * scaleFactor;\n            ctx.textAlign = \"center\";\n            \n            const moneyText = `$${serverPlayer.money?.toFixed(2) || '1.00'}`;\n            const offsetY = 20 * scaleFactor; // Scale the offset with snake size\n            \n            // Draw text outline for better visibility\n            ctx.strokeText(moneyText, head.x, head.y - offsetY);\n            ctx.fillText(moneyText, head.x, head.y - offsetY);\n            ctx.restore();\n            \n            // Cash-out progress indicator above head\n            if (isCashingOut && cashOutProgress > 0) {\n              const barWidth = 50;\n              const barHeight = 8;\n              const barX = head.x - barWidth / 2;\n              const barY = head.y - cappedRadius - 30;\n              \n              // Background bar\n              ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n              ctx.fillRect(barX, barY, barWidth, barHeight);\n              \n              // Progress bar\n              ctx.fillStyle = '#ffd700';\n              ctx.fillRect(barX, barY, barWidth * cashOutProgress, barHeight);\n              \n              // Border\n              ctx.strokeStyle = '#ffffff';\n              ctx.lineWidth = 1;\n              ctx.strokeRect(barX, barY, barWidth, barHeight);\n              \n              // \"CASHING OUT\" text\n              ctx.fillStyle = '#ffd700';\n              ctx.font = 'bold 12px Arial';\n              ctx.textAlign = 'center';\n              ctx.fillText('CASHING OUT', head.x, barY - 8);\n            }\n          }\n        }\n      });\n\n      // No fade animation - removed completely\n\n      // Draw your own snake locally using EXACT same rendering as remote players\n      // Render if game is active AND visible AND has segments\n      const shouldRender = gameStarted && snakeVisibleRef.current && snake.visibleSegments.length > 0;\n      \n      if (shouldRender) {\n        console.log(`✅ RENDERING SNAKE`);\n        \n        // Save current context\n        ctx.save();\n        const fullSnakeBody = snake.visibleSegments;\n        \n        // Draw snake body with EXACT same styling as remote players\n        ctx.save();\n        \n        // Add drop shadow when not boosting (like remote snakes)\n        ctx.shadowColor = \"rgba(0, 0, 0, 0.3)\";\n        ctx.shadowBlur = 6;\n        ctx.shadowOffsetX = 2;\n        ctx.shadowOffsetY = 2;\n        \n        // Cap rendering at exactly 100 segments to match game limits\n        const maxRenderSegments = 100; // Hard cap at 100 segments max\n        const segmentsToRender = Math.min(fullSnakeBody.length, maxRenderSegments);\n        \n        // Draw segments from tail to head for proper layering\n        for (let i = segmentsToRender - 1; i >= 0; i--) {\n          const segment = fullSnakeBody[i];\n          const segmentRadius = snake.getSegmentRadius();\n          \n          ctx.fillStyle = '#d55400'; // Your snake color\n          ctx.beginPath();\n          ctx.arc(segment.x, segment.y, segmentRadius, 0, Math.PI * 2);\n          ctx.fill();\n        }\n        \n        ctx.restore();\n        \n        // Draw rotated square eyes exactly like remote snakes\n        if (fullSnakeBody.length > 0) {\n          const head = fullSnakeBody[0];\n          \n          // Calculate movement direction from first two segments\n          let movementAngle = 0;\n          if (fullSnakeBody.length > 1) {\n            const dx = head.x - fullSnakeBody[1].x;\n            const dy = head.y - fullSnakeBody[1].y;\n            movementAngle = Math.atan2(dy, dx);\n          }\n          \n          // Scale eyes with snake size (exact same as remote snakes)\n          const segmentRadius = snake.getSegmentRadius();\n          const eyeDistance = segmentRadius * 0.5; // Scale eye distance with snake size\n          const eyeSize = segmentRadius * 0.3; // Scale eye size with snake size\n          const pupilSize = segmentRadius * 0.15; // Scale pupil with snake size\n          \n          // Eye positions perpendicular to movement direction\n          const eye1X = head.x + Math.cos(movementAngle + Math.PI/2) * eyeDistance;\n          const eye1Y = head.y + Math.sin(movementAngle + Math.PI/2) * eyeDistance;\n          const eye2X = head.x + Math.cos(movementAngle - Math.PI/2) * eyeDistance;\n          const eye2Y = head.y + Math.sin(movementAngle - Math.PI/2) * eyeDistance;\n          \n          // Draw first eye with rotation\n          ctx.save();\n          ctx.translate(eye1X, eye1Y);\n          ctx.rotate(movementAngle);\n          ctx.fillStyle = 'white';\n          ctx.fillRect(-eyeSize, -eyeSize, eyeSize * 2, eyeSize * 2);\n          \n          // Draw first pupil looking forward\n          const pupilOffset = eyeSize * 0.4; // Scale pupil offset with eye size\n          ctx.fillStyle = 'black';\n          ctx.fillRect(\n            pupilOffset - pupilSize,\n            0 - pupilSize,\n            pupilSize * 2, \n            pupilSize * 2\n          );\n          ctx.restore();\n          \n          // Draw second eye with rotation\n          ctx.save();\n          ctx.translate(eye2X, eye2Y);\n          ctx.rotate(movementAngle);\n          ctx.fillStyle = 'white';\n          ctx.fillRect(-eyeSize, -eyeSize, eyeSize * 2, eyeSize * 2);\n          \n          // Draw second pupil looking forward\n          ctx.fillStyle = 'black';\n          ctx.fillRect(\n            pupilOffset - pupilSize,\n            0 - pupilSize,\n            pupilSize * 2, \n            pupilSize * 2\n          );\n          ctx.restore();\n        }\n        \n        // Restore opacity\n        ctx.restore();\n      } else {\n        console.log(`🚫 SNAKE HIDDEN - NOT RENDERING (gameStarted=${gameStarted}, visible=${snakeVisibleRef.current}, segments=${snake.visibleSegments.length})`);\n      }\n\n      // REMOVED: Legacy other players rendering to prevent duplicate snake bodies\n\n      // No bots in multiplayer - removed all bot rendering\n\n      // REMOVED: Bot snake rendering to prevent duplicate snake bodies in multiplayer\n      \n      ctx.globalAlpha = 1.0;\n\n      // Only render snake if game is not over (use ref for immediate response)\n      if (!gameOverRef.current) {\n        // Draw single glowing outline behind the whole snake when boosting\n        if (snake.isBoosting && snake.visibleSegments.length > 0) {\n          ctx.save();\n          ctx.beginPath();\n          \n          const segmentRadius = snake.getSegmentRadius();\n          \n          // Cap glow scaling at 100 segments\n          const MAX_SEGMENTS = 100;\n          const currentSegments = Math.min(snake.visibleSegments.length, MAX_SEGMENTS);\n          const segmentProgress = currentSegments / MAX_SEGMENTS;\n          const maxGlowScale = 2.2; // Same cap as eyes\n          const glowScaleFactor = 1 + (segmentProgress * (maxGlowScale - 1));\n          \n          // Create a composite path for all segments\n          for (let i = 0; i < snake.visibleSegments.length; i++) {\n            const segment = snake.visibleSegments[i];\n            ctx.moveTo(segment.x + segmentRadius, segment.y);\n            ctx.arc(segment.x, segment.y, segmentRadius, 0, Math.PI * 2);\n          }\n          \n          // Apply single glow effect to the entire snake outline with capped scaling\n          ctx.shadowColor = \"white\";\n          ctx.shadowBlur = 15;\n          ctx.strokeStyle = \"white\";\n          ctx.lineWidth = 3 * glowScaleFactor;\n          ctx.stroke();\n          ctx.restore();\n        }\n        \n\n        \n        // Draw snake segments with appropriate shadow effects\n        ctx.save();\n        \n        if (!snake.isBoosting) {\n          // Add subtle drop shadow when not boosting\n          ctx.shadowColor = \"rgba(0, 0, 0, 0.3)\";\n          ctx.shadowBlur = 6;\n          ctx.shadowOffsetX = 2;\n          ctx.shadowOffsetY = 2;\n        } else {\n          // Ensure no shadow when boosting (glow effect is already applied)\n          ctx.shadowColor = \"transparent\";\n          ctx.shadowBlur = 0;\n          ctx.shadowOffsetX = 0;\n          ctx.shadowOffsetY = 0;\n        }\n        \n        for (let i = snake.visibleSegments.length - 1; i >= 0; i--) {\n          const segment = snake.visibleSegments[i];\n          const segmentRadius = snake.getSegmentRadius();\n          \n          ctx.globalAlpha = segment.opacity;\n          \n          // Draw solid segment\n          ctx.fillStyle = \"#d55400\";\n          ctx.beginPath();\n          ctx.arc(segment.x, segment.y, segmentRadius, 0, Math.PI * 2);\n          ctx.fill();\n        }\n        \n        ctx.restore();\n        \n        // Reset global alpha\n        ctx.globalAlpha = 1.0;\n\n        // Draw money balance above snake head\n        if (snake.visibleSegments.length > 0) {\n          const snakeHead = snake.visibleSegments[0];\n          \n          // Cap the scaling at 4 mass equivalent\n          const baseMass = 6; // Starting mass\n          const maxMass = 10; // Cap at 4 mass (starting at 6, so 6+4=10)\n          const cappedMass = Math.min(snake.visibleSegments.length, maxMass);\n          const scaleFactor = Math.max(0.8, cappedMass / baseMass);\n          \n          ctx.font = `${Math.floor(10 * scaleFactor)}px 'Press Start 2P', monospace`;\n          ctx.fillStyle = \"#ffffff\";\n          ctx.strokeStyle = \"#000000\";\n          ctx.lineWidth = 3 * scaleFactor;\n          ctx.textAlign = \"center\";\n          \n          const moneyText = `$${snake.money.toFixed(2)}`;\n          const offsetY = 20 * scaleFactor; // Scale the offset with snake size\n          \n          // Draw text outline for better visibility\n          ctx.strokeText(moneyText, snakeHead.x, snakeHead.y - offsetY);\n          ctx.fillText(moneyText, snakeHead.x, snakeHead.y - offsetY);\n          \n          // Draw cash-out progress bar under money counter\n          if (cashingOut) {\n            const barWidth = 40 * scaleFactor; // Smaller width\n            const barHeight = 3 * scaleFactor; // Smaller height\n            const barX = snakeHead.x - barWidth / 2;\n            const barY = snakeHead.y - offsetY + 15; // Closer to money counter\n            \n            // Background bar\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n            ctx.fillRect(barX, barY, barWidth, barHeight);\n            \n            // Progress bar\n            ctx.fillStyle = '#53d493'; // Green progress\n            ctx.fillRect(barX, barY, barWidth * cashOutProgress, barHeight);\n            \n            // Border\n            ctx.strokeStyle = '#134242';\n            ctx.lineWidth = 1;\n            ctx.strokeRect(barX, barY, barWidth, barHeight);\n          }\n        }\n\n        // Draw eyes that track the cursor smoothly (after head is drawn)\n        if (snake.visibleSegments.length > 0) {\n          const snakeHead = snake.visibleSegments[0];\n          const movementAngle = snake.currentAngle;\n          // Cap eye scaling at 100 segments with balanced proportions\n          const MAX_SEGMENTS = 100;\n          const currentSegments = Math.min(snake.visibleSegments.length, MAX_SEGMENTS);\n          const segmentProgress = currentSegments / MAX_SEGMENTS;\n          const maxEyeScale = 2.2; // Balanced scaling for visibility\n          const scaleFactor = 1 + (segmentProgress * (maxEyeScale - 1));\n          const eyeDistance = 4.0 * scaleFactor; // Balanced distance from center\n          const eyeSize = 2.8 * scaleFactor; // Balanced eye size\n          const pupilSize = 1.3 * scaleFactor; // Balanced pupil size\n          \n          // Calculate cursor direction using mouse direction vector\n          const cursorAngle = Math.atan2(mouseDirection.y, mouseDirection.x);\n          \n          // Eye positions perpendicular to movement direction\n          const eye1X = snakeHead.x + Math.cos(movementAngle + Math.PI/2) * eyeDistance;\n          const eye1Y = snakeHead.y + Math.sin(movementAngle + Math.PI/2) * eyeDistance;\n          const eye2X = snakeHead.x + Math.cos(movementAngle - Math.PI/2) * eyeDistance;\n          const eye2Y = snakeHead.y + Math.sin(movementAngle - Math.PI/2) * eyeDistance;\n          \n          // Draw rotated square eyes\n          ctx.save();\n          \n          // Draw first eye with rotation\n          ctx.translate(eye1X, eye1Y);\n          ctx.rotate(movementAngle);\n          ctx.fillStyle = 'white';\n          ctx.fillRect(-eyeSize, -eyeSize, eyeSize * 2, eyeSize * 2);\n          \n          // Draw first pupil (rotated relative to eye)\n          const pupilOffset = 1.2;\n          ctx.fillStyle = 'black';\n          ctx.fillRect(\n            (Math.cos(cursorAngle - movementAngle) * pupilOffset) - pupilSize,\n            (Math.sin(cursorAngle - movementAngle) * pupilOffset) - pupilSize,\n            pupilSize * 2, \n            pupilSize * 2\n          );\n          ctx.restore();\n          \n          // Draw second eye with rotation\n          ctx.save();\n          ctx.translate(eye2X, eye2Y);\n          ctx.rotate(movementAngle);\n          ctx.fillStyle = 'white';\n          ctx.fillRect(-eyeSize, -eyeSize, eyeSize * 2, eyeSize * 2);\n          \n          // Draw second pupil (rotated relative to eye)\n          ctx.fillStyle = 'black';\n          ctx.fillRect(\n            (Math.cos(cursorAngle - movementAngle) * pupilOffset) - pupilSize,\n            (Math.sin(cursorAngle - movementAngle) * pupilOffset) - pupilSize,\n            pupilSize * 2, \n            pupilSize * 2\n          );\n          ctx.restore();\n        }\n\n        // Restore context\n        ctx.restore();\n      } // Close gameOver check\n\n      // No UI display needed\n      \n\n      // Only continue game loop if game is not over (use ref for immediate response)\n      if (!gameOverRef.current) {\n        animationId = requestAnimationFrame(gameLoop);\n      } else {\n        console.log(`🛑 GAME LOOP STOPPED - gameOverRef = ${gameOverRef.current}`);\n      }\n    };\n\n    animationId = requestAnimationFrame(gameLoop);\n    return () => {\n      cancelAnimationFrame(animationId);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [mouseDirection, snake, gameOver, canvasSize, score, hiddenAt, gameStarted]);\n\n  const resetGame = () => {\n    setGameOver(false);\n    gameOverRef.current = false;\n    setSnakeVisible(true);\n    snakeVisibleRef.current = true;\n    setSnakeFading(false);\n    snakeFadingRef.current = false;\n    setFadeOpacity(1.0);\n    fadeOpacityRef.current = 1.0;\n    setScore(0);\n    setShowCongrats(false);\n    // Reset snake to initial state using new system\n    snake.head = { x: MAP_CENTER_X, y: MAP_CENTER_Y };\n    snake.currentAngle = 0;\n    snake.segmentTrail = [{ x: MAP_CENTER_X, y: MAP_CENTER_Y }];\n    snake.totalMass = snake.START_MASS;\n    snake.growthRemaining = 0;\n    snake.partialGrowth = 0; // Reset partialGrowth for faster mass conversion\n    snake.distanceBuffer = 0;\n    snake.currentSegmentCount = snake.START_MASS; // Reset animated segment count\n    snake.money = 1.00; // Reset money to starting amount\n    snake.isBoosting = false;\n    snake.boostCooldown = 0;\n    snake.speed = snake.baseSpeed;\n    snake.updateVisibleSegments();\n    setIsBoosting(false);\n    setMouseDirection({ x: 1, y: 0 });\n  };\n\n  const exitGame = () => {\n    setLocation('/');\n  };\n\n  const handleLoadingComplete = () => {\n    setIsLoading(false);\n    setGameStarted(true);\n    setGameStartTime(Date.now()); // Track when the game started\n    \n    // Force immediate multiple renders to ensure all snake eyes appear instantly\n    if (canvasRef.current) {\n      for (let i = 0; i < 10; i++) {\n        setTimeout(() => {\n          window.requestAnimationFrame(() => {\n            // Force complete rendering of all snake elements including eyes\n          });\n        }, i * 16); // Render every frame for 10 frames\n      }\n    }\n  };\n\n  return (\n    <div className=\"relative w-screen h-screen overflow-hidden bg-dark-bg\">\n      {/* Loading Screen */}\n      {isLoading && <LoadingScreen onLoadingComplete={handleLoadingComplete} />}\n      \n      {/* Minimap */}\n      <div className=\"absolute top-4 left-4 z-10\">\n        <svg width=\"96\" height=\"96\" className=\"w-full h-full\">\n          {/* Map boundary circle */}\n          <circle\n            cx=\"48\"\n            cy=\"48\"\n            r=\"44\"\n            fill=\"black\"\n            stroke=\"#53d392\"\n            strokeWidth=\"2\"\n          />\n            \n            {/* Player snake dot (red) */}\n            {snake.visibleSegments.length > 0 && (\n              <circle\n                cx={48 + ((snake.head.x - MAP_CENTER_X) / MAP_RADIUS) * 44}\n                cy={48 + ((snake.head.y - MAP_CENTER_Y) / MAP_RADIUS) * 44}\n                r=\"2\"\n                fill=\"#ff4444\"\n              />\n            )}\n            \n            {/* Bot snake dots */}\n            {botSnakes.map(bot => (\n              <circle\n                key={bot.id}\n                cx={48 + ((bot.head.x - MAP_CENTER_X) / MAP_RADIUS) * 44}\n                cy={48 + ((bot.head.y - MAP_CENTER_Y) / MAP_RADIUS) * 44}\n                r=\"1.5\"\n                fill={bot.color}\n              />\n            ))}\n        </svg>\n      </div>\n\n      {/* Connection Status */}\n      <div className=\"absolute top-4 right-4 z-10\">\n        <div className=\"bg-black/60 border border-gray-500 rounded px-3 py-2\">\n          <div className={`text-sm font-mono ${\n            connectionStatus === 'Connected' ? 'text-green-400' : \n            connectionStatus === 'Connecting...' ? 'text-yellow-400' : 'text-red-400'\n          }`}>\n            {connectionStatus}\n          </div>\n          <div className=\"text-white text-xs font-mono\">\n            Players: {serverPlayers.length}\n          </div>\n        </div>\n      </div>\n\n      {/* Mass Counter */}\n      <div className=\"absolute top-20 right-4 z-10\">\n        <div className=\"bg-black/60 border border-gray-500 rounded px-3 py-2\">\n          <div className=\"text-white text-sm font-mono\">\n            Mass: {Math.floor(snake.totalMass).toFixed(0)}\n          </div>\n          <div className=\"text-gray-300 text-xs font-mono\">\n            Segments: {snake.visibleSegments.length}\n          </div>\n        </div>\n      </div>\n\n      {/* Instructions */}\n      <div className=\"absolute bottom-4 left-4 z-10\">\n        <div className=\"bg-black/60 border border-gray-500 rounded px-3 py-2\">\n          <div className=\"text-white text-sm font-mono\">Hold Q to cash out</div>\n          <div className=\"text-white text-sm font-mono\">Left click to boost</div>\n        </div>\n      </div>\n      \n\n\n      {showCongrats && (\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10\">\n          <div className=\"bg-dark-card/90 backdrop-blur-sm border border-dark-border rounded-lg p-8 text-center\">\n            <div className=\"text-green-500 text-4xl font-bold mb-4\">Congratulations!</div>\n            <div className=\"text-white text-2xl mb-2\">You cashed out!</div>\n            <div className=\"text-neon-yellow text-xl mb-6\">${cashedOutAmount.toFixed(2)}</div>\n            <div className=\"flex gap-4\">\n              <Button\n                onClick={resetGame}\n                className=\"px-6 py-2 bg-green-600 text-white rounded hover:bg-green-700\"\n              >\n                Play Again\n              </Button>\n              <Button\n                onClick={exitGame}\n                className=\"px-6 py-2 bg-gray-600 text-white rounded hover:bg-gray-700\"\n              >\n                Continue\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {showCongrats && (\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10\">\n          <div className=\"bg-dark-card/90 backdrop-blur-sm border border-neon-green rounded-lg p-8 text-center\">\n            <div className=\"text-neon-green text-4xl font-bold mb-4\">Congratulations!</div>\n            <div className=\"text-white text-2xl mb-2\">You cashed out:</div>\n            <div className=\"text-neon-yellow text-3xl font-bold mb-6\">${cashedOutAmount.toFixed(2)}</div>\n            <div className=\"flex gap-4 justify-center\">\n              <Button\n                onClick={resetGame}\n                className=\"px-6 py-2 bg-green-600 text-white rounded hover:bg-green-700 font-bold\"\n              >\n                Play Again\n              </Button>\n              <Button\n                onClick={exitGame}\n                className=\"px-6 py-2 bg-gray-600 text-white rounded hover:bg-gray-700\"\n              >\n                Continue\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <canvas\n        ref={canvasRef}\n        width={canvasSize.width}\n        height={canvasSize.height}\n        className=\"cursor-default block\"\n        style={{ background: '#15161b' }}\n      />\n    </div>\n  );\n}","size_bytes":111110},"client/src/pages/home.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { useGame } from \"@/contexts/game-context\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Wallet } from \"@/components/ui/wallet\";\n\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Settings, \n  Volume2, \n  LogOut, \n  Edit3, \n  Wallet as WalletIcon,\n  Users,\n  Gift,\n  Trophy,\n  X\n} from \"lucide-react\";\nimport logoImage from \"@assets/0b174992-98e7-4e65-b9d4-2e1f1794e0ca.png_1753912259610.png\";\n\n// Decorative snake for background animation\nclass DecorativeSnake {\n  head: { x: number; y: number };\n  currentAngle: number;\n  segmentTrail: Array<{ x: number; y: number }>;\n  speed: number;\n  turnSpeed: number;\n  targetAngle: number;\n  nextTurnTime: number;\n  visibleSegments: Array<{ x: number; y: number }>;\n  \n  constructor(x: number, y: number) {\n    this.head = { x, y };\n    this.currentAngle = Math.random() * Math.PI * 2;\n    this.segmentTrail = [{ x, y }];\n    this.speed = 0.5;\n    this.turnSpeed = 0.02;\n    this.targetAngle = this.currentAngle;\n    this.nextTurnTime = Date.now() + 2000;\n    this.visibleSegments = [];\n    \n    // Create initial trail points for smooth following\n    for (let i = 0; i < 100; i++) {\n      this.segmentTrail.push({\n        x: x - Math.cos(this.currentAngle) * i * 2,\n        y: y - Math.sin(this.currentAngle) * i * 2\n      });\n    }\n    \n    this.updateVisibleSegments();\n  }\n  \n  updateVisibleSegments() {\n    this.visibleSegments = [];\n    const segmentCount = 12;\n    const segmentSpacing = 18; // Increased to 18 for proper spacing like in-game snakes\n    \n    for (let i = 0; i < segmentCount; i++) {\n      const trailIndex = Math.floor(i * segmentSpacing);\n      if (trailIndex < this.segmentTrail.length) {\n        this.visibleSegments.push(this.segmentTrail[trailIndex]);\n      }\n    }\n  }\n  \n  update(canvasWidth: number, canvasHeight: number, foods: Array<{ x: number; y: number; wobbleX: number; wobbleY: number }>) {\n    const currentTime = Date.now();\n    \n    // Random direction changes\n    if (currentTime > this.nextTurnTime) {\n      this.targetAngle = Math.random() * Math.PI * 2;\n      this.nextTurnTime = currentTime + 1000 + Math.random() * 3000;\n    }\n    \n    // Look for nearby food\n    const nearbyFood = foods.find(food => {\n      const distance = Math.sqrt((food.x - this.head.x) ** 2 + (food.y - this.head.y) ** 2);\n      return distance < 100;\n    });\n    \n    if (nearbyFood) {\n      this.targetAngle = Math.atan2(nearbyFood.y - this.head.y, nearbyFood.x - this.head.x);\n    }\n    \n    // Smooth angle interpolation\n    let angleDiff = this.targetAngle - this.currentAngle;\n    if (angleDiff > Math.PI) angleDiff -= Math.PI * 2;\n    if (angleDiff < -Math.PI) angleDiff += Math.PI * 2;\n    this.currentAngle += angleDiff * this.turnSpeed;\n    \n    // Move forward\n    this.head.x += Math.cos(this.currentAngle) * this.speed;\n    this.head.y += Math.sin(this.currentAngle) * this.speed;\n    \n    // Wrap around screen edges\n    if (this.head.x < 0) this.head.x = canvasWidth;\n    if (this.head.x > canvasWidth) this.head.x = 0;\n    if (this.head.y < 0) this.head.y = canvasHeight;\n    if (this.head.y > canvasHeight) this.head.y = 0;\n    \n    // Add new trail point\n    this.segmentTrail.unshift({ x: this.head.x, y: this.head.y });\n    \n    // Keep trail length manageable\n    if (this.segmentTrail.length > 300) {\n      this.segmentTrail.pop();\n    }\n    \n    this.updateVisibleSegments();\n  }\n  \n  draw(ctx: CanvasRenderingContext2D) {\n    // Draw snake segments exactly like the multiplayer game\n    ctx.save();\n    \n    // Add subtle drop shadow (not boosting)\n    ctx.shadowColor = \"rgba(0, 0, 0, 0.3)\";\n    ctx.shadowBlur = 6;\n    ctx.shadowOffsetX = 2;\n    ctx.shadowOffsetY = 2;\n    \n    const segmentRadius = 10;\n    ctx.fillStyle = '#d55400'; // Orange snake color\n    \n    // Draw all segments with shadow\n    for (let i = this.visibleSegments.length - 1; i >= 0; i--) {\n      const segment = this.visibleSegments[i];\n      ctx.beginPath();\n      ctx.arc(segment.x, segment.y, segmentRadius, 0, Math.PI * 2);\n      ctx.fill();\n    }\n    \n    ctx.restore();\n    \n    // Draw rotated square eyes exactly like multiplayer game\n    if (this.visibleSegments.length > 0) {\n      const head = this.visibleSegments[0];\n      const eyeDistance = 5;\n      const eyeSize = 3;\n      const pupilSize = 1.5;\n      \n      // Eye positions perpendicular to movement direction\n      const eye1X = head.x + Math.cos(this.currentAngle + Math.PI/2) * eyeDistance;\n      const eye1Y = head.y + Math.sin(this.currentAngle + Math.PI/2) * eyeDistance;\n      const eye2X = head.x + Math.cos(this.currentAngle - Math.PI/2) * eyeDistance;\n      const eye2Y = head.y + Math.sin(this.currentAngle - Math.PI/2) * eyeDistance;\n      \n      // Draw first eye with rotation (exact copy from multiplayer)\n      ctx.save();\n      ctx.translate(eye1X, eye1Y);\n      ctx.rotate(this.currentAngle);\n      ctx.fillStyle = 'white';\n      ctx.fillRect(-eyeSize, -eyeSize, eyeSize * 2, eyeSize * 2);\n      \n      // Draw first pupil looking forward\n      const pupilOffset = 1.2;\n      ctx.fillStyle = 'black';\n      ctx.fillRect(\n        pupilOffset - pupilSize,\n        0 - pupilSize,\n        pupilSize * 2, \n        pupilSize * 2\n      );\n      ctx.restore();\n      \n      // Draw second eye with rotation\n      ctx.save();\n      ctx.translate(eye2X, eye2Y);\n      ctx.rotate(this.currentAngle);\n      ctx.fillStyle = 'white';\n      ctx.fillRect(-eyeSize, -eyeSize, eyeSize * 2, eyeSize * 2);\n      \n      // Draw second pupil looking forward\n      ctx.fillStyle = 'black';\n      ctx.fillRect(\n        pupilOffset - pupilSize,\n        0 - pupilSize,\n        pupilSize * 2, \n        pupilSize * 2\n      );\n      ctx.restore();\n    }\n  }\n  \n  eatFood(foods: Array<{ x: number; y: number; wobbleX: number; wobbleY: number }>) {\n    return foods.filter(food => {\n      const distance = Math.sqrt((food.x - this.head.x) ** 2 + (food.y - this.head.y) ** 2);\n      if (distance < 15) {\n        // Grow snake by extending trail\n        for (let i = 0; i < 20; i++) {\n          const lastSegment = this.segmentTrail[this.segmentTrail.length - 1];\n          this.segmentTrail.push({ x: lastSegment.x, y: lastSegment.y });\n        }\n        this.updateVisibleSegments();\n        return false; // Remove this food\n      }\n      return true; // Keep this food\n    });\n  }\n}\n\nexport default function Home() {\n  const { user, login, register, logout, updateUser } = useAuth();\n  const [, setLocation] = useLocation();\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const { \n    selectedBetAmount, \n    setSelectedBetAmount\n  } = useGame();\n  const { toast } = useToast();\n\n  // Decorative snake animation state\n  const [decorativeSnake, setDecorativeSnake] = useState<DecorativeSnake | null>(null);\n  const [foods, setFoods] = useState<Array<{ x: number; y: number }>>([]);\n\n  // Animated player count effect - fluctuates realistically\n  useEffect(() => {\n    let currentCount = 150;\n    let upCount = 0; // Track consecutive ups to implement up-up-down pattern\n    let hasReached600Today = false;\n    \n    const interval = setInterval(() => {\n      const now = new Date();\n      const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      const timeToday = now.getTime() - todayStart.getTime();\n      const dayProgress = timeToday / (24 * 60 * 60 * 1000); // 0-1 through the day\n      \n      // Reset 600 flag at midnight\n      if (dayProgress < 0.01) {\n        hasReached600Today = false;\n      }\n      \n      // Determine direction based on pattern and daily goal\n      let shouldGoUp = false;\n      \n      if (!hasReached600Today && dayProgress > 0.8 && Math.random() < 0.3) {\n        // Late in day, chance to reach 600\n        shouldGoUp = currentCount < 600;\n        if (currentCount >= 600) hasReached600Today = true;\n      } else if (upCount < 2) {\n        // Up twice pattern\n        shouldGoUp = Math.random() < 0.7;\n        if (shouldGoUp) upCount++;\n      } else {\n        // Down once after two ups\n        shouldGoUp = false;\n        upCount = 0;\n      }\n      \n      // Apply bounds\n      if (currentCount <= 150) shouldGoUp = true;\n      if (currentCount >= 600 && hasReached600Today) shouldGoUp = false;\n      \n      // Update count\n      if (shouldGoUp) {\n        currentCount += Math.floor(Math.random() * 3) + 1; // 1-3 increase\n      } else {\n        currentCount -= Math.floor(Math.random() * 2) + 1; // 1-2 decrease\n      }\n      \n      // Ensure bounds\n      currentCount = Math.max(150, Math.min(600, currentCount));\n      setAnimatedPlayerCount(currentCount);\n    }, 3000 + Math.random() * 4000); // 3-7 seconds\n    \n    return () => clearInterval(interval);\n  }, []);\n  \n  // Daily winnings counter - $1 per second, 20k-30k target\n  useEffect(() => {\n    const updateWinnings = () => {\n      const now = new Date();\n      const easternTime = new Date(now.toLocaleString(\"en-US\", {timeZone: \"America/New_York\"}));\n      const todayStart = new Date(easternTime.getFullYear(), easternTime.getMonth(), easternTime.getDate());\n      const timeToday = easternTime.getTime() - todayStart.getTime();\n      const secondsToday = Math.floor(timeToday / 1000);\n      \n      // Random daily target between 20k-30k\n      const seed = todayStart.getTime();\n      const dailyTarget = 20000 + (Math.sin(seed) * 0.5 + 0.5) * 10000;\n      \n      // $1 per second, but cap at daily target\n      const currentWinnings = Math.min(secondsToday, Math.floor(dailyTarget));\n      setDailyWinnings(currentWinnings);\n    };\n    \n    updateWinnings();\n    const interval = setInterval(updateWinnings, 1000); // Update every second\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  // State variables\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [animatedPlayerCount, setAnimatedPlayerCount] = useState(150);\n  const [dailyWinnings, setDailyWinnings] = useState(0);\n  \n  // Celebration popup state\n  const [showCelebration, setShowCelebration] = useState(false);\n  const [cashOutAmount, setCashOutAmount] = useState(0);\n  \n  // Game over popup state\n  const [showGameOver, setShowGameOver] = useState(false);\n  const [gameOverData, setGameOverData] = useState({ finalMass: 0, timeAlive: 0 });\n\n  // Check for celebration data from localStorage (set by cash-out completion)\n  useEffect(() => {\n    const celebrationData = localStorage.getItem('cashOutCelebration');\n    if (celebrationData) {\n      const { amount } = JSON.parse(celebrationData);\n      setCashOutAmount(amount);\n      setShowCelebration(true);\n      localStorage.removeItem('cashOutCelebration'); // Clean up\n    }\n    \n    // Check for game over data from localStorage (set by death)\n    const gameOverData = localStorage.getItem('gameOverData');\n    if (gameOverData) {\n      const data = JSON.parse(gameOverData);\n      setGameOverData(data);\n      setShowGameOver(true);\n      localStorage.removeItem('gameOverData'); // Clean up\n    }\n  }, []);\n\n  // Auth form handler\n  const handleAuth = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      await login(username, password);\n      toast({\n        title: \"Welcome back!\",\n        description: \"Successfully logged in.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Authentication failed\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Region selection state\n  const [selectedRegion, setSelectedRegion] = useState<'us' | 'eu' | null>(null);\n  const [isDetectingRegion, setIsDetectingRegion] = useState(false);\n\n  // Start game handler with region selection\n  const handleStartGameWithRegion = async (manualRegion?: 'us' | 'eu') => {\n    try {\n      let gameRegion = manualRegion;\n      \n      if (!gameRegion) {\n        // Auto-detect region\n        setIsDetectingRegion(true);\n        toast({\n          title: \"Detecting Best Region...\",\n          description: \"Finding nearest server for optimal performance\",\n        });\n        \n        const { detectBestRegion } = await import('@/lib/regionDetection');\n        gameRegion = await detectBestRegion();\n        setIsDetectingRegion(false);\n      }\n      \n      toast({\n        title: `Connecting to ${gameRegion.toUpperCase()} Server...`,\n        description: \"Looking for available room.\",\n      });\n      \n      // Get best available room from server with region\n      const response = await fetch(`/api/room/join?region=${gameRegion}`);\n      const roomData = await response.json();\n      \n      toast({\n        title: \"Joining Game!\",\n        description: `Entering ${gameRegion.toUpperCase()} room ${roomData.roomId} (${roomData.currentPlayers}/${roomData.maxPlayers} players)`,\n      });\n      \n      // Navigate to regional room-specific game\n      setLocation(`/snake/${gameRegion}/${roomData.roomId}`);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Could not find available room. Trying backup...\",\n        variant: \"destructive\",\n      });\n      // Fallback to US room 1\n      setLocation('/snake/us/1');\n    }\n  };\n\n  // Handle daily crate claim\n  const handleClaimDailyCrate = async () => {\n    if (!user) return;\n\n    try {\n      const response = await apiRequest(\"POST\", `/api/users/${user.id}/claim-daily-crate`, {});\n      const crate = await response.json();\n      \n      const reward = parseFloat(crate.reward);\n      const newBalance = parseFloat(user.balance) + reward;\n      updateUser({ balance: newBalance.toFixed(4) });\n\n      toast({\n        title: \"Daily Crate Claimed!\",\n        description: `You received $${reward.toFixed(2)}!`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Crate Already Claimed\",\n        description: \"You've already claimed your daily crate today.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Mouse controls are now handled in the SnakeGame component\n\n  // Skip authentication for now - show homepage directly\n\n  // Initialize decorative snake and food\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    \n    // Create snake at random position\n    const snake = new DecorativeSnake(\n      Math.random() * canvas.width,\n      Math.random() * canvas.height\n    );\n    setDecorativeSnake(snake);\n    \n    // Create initial food with wobble properties\n    let currentFoods: Array<{ x: number; y: number; wobbleX: number; wobbleY: number }> = [];\n    for (let i = 0; i < 20; i++) {\n      currentFoods.push({\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        wobbleX: Math.random() * Math.PI * 2,\n        wobbleY: Math.random() * Math.PI * 2\n      });\n    }\n    setFoods(currentFoods);\n    \n    // Animation loop\n    const animate = () => {\n      const ctx = canvas.getContext('2d');\n      if (!ctx || !snake) return;\n      \n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      \n      // Update snake\n      snake.update(canvas.width, canvas.height, currentFoods);\n      \n      // Check for food consumption\n      currentFoods = snake.eatFood(currentFoods);\n      \n      // Update food wobble and attraction\n      const time = Date.now() * 0.003;\n      currentFoods.forEach(food => {\n        // Update wobble - 50% slower\n        food.wobbleX += 0.025;\n        food.wobbleY += 0.015;\n        \n        // Check distance to snake\n        const distanceToSnake = Math.sqrt((food.x - snake.head.x) ** 2 + (food.y - snake.head.y) ** 2);\n        \n        // Move towards snake if close (6x stronger gravitational pull)\n        if (distanceToSnake < 80) {\n          const attraction = 1.8; // Increased from 0.9 to 1.8 (2x stronger than before, 6x stronger than original)\n          const angle = Math.atan2(snake.head.y - food.y, snake.head.x - food.x);\n          food.x += Math.cos(angle) * attraction;\n          food.y += Math.sin(angle) * attraction;\n        }\n      });\n      \n      // Add new food if some were eaten\n      while (currentFoods.length < 20) {\n        currentFoods.push({\n          x: Math.random() * canvas.width,\n          y: Math.random() * canvas.height,\n          wobbleX: Math.random() * Math.PI * 2,\n          wobbleY: Math.random() * Math.PI * 2\n        });\n      }\n      \n      // Draw food with wobble and glow effect\n      currentFoods.forEach(food => {\n        // Calculate wobble position\n        const wobbleStrength = 2;\n        const wobbleX = Math.sin(food.wobbleX) * wobbleStrength;\n        const wobbleY = Math.cos(food.wobbleY) * wobbleStrength;\n        const displayX = food.x + wobbleX;\n        const displayY = food.y + wobbleY;\n        \n        // Create subtle glow effect\n        const glowGradient = ctx.createRadialGradient(\n          displayX, displayY, 0,\n          displayX, displayY, 8\n        );\n        glowGradient.addColorStop(0, '#53d493');\n        glowGradient.addColorStop(0.5, 'rgba(83, 212, 147, 0.4)');\n        glowGradient.addColorStop(1, 'rgba(83, 212, 147, 0)');\n        \n        ctx.fillStyle = glowGradient;\n        ctx.beginPath();\n        ctx.arc(displayX, displayY, 8, 0, Math.PI * 2);\n        ctx.fill();\n        \n        // Draw solid food center\n        ctx.fillStyle = '#53d493';\n        ctx.beginPath();\n        ctx.arc(displayX, displayY, 4, 0, Math.PI * 2);\n        ctx.fill();\n      });\n      \n      // Draw snake\n      snake.draw(ctx);\n      \n      requestAnimationFrame(animate);\n    };\n    \n    animate();\n    \n    // Handle window resize\n    const handleResize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-white font-retro relative overflow-hidden\" style={{backgroundColor: '#15161b'}}>\n      {/* Background canvas for decorative snake */}\n      <canvas\n        ref={canvasRef}\n        className=\"absolute inset-0 pointer-events-none\"\n        style={{ zIndex: 0 }}\n      />\n      \n      {/* Content wrapper with higher z-index */}\n      <div className=\"relative\" style={{ zIndex: 10 }}>\n        {/* Top Bar - Welcome with gaming controller icon */}\n      <div className=\"flex items-center justify-between p-4\">\n        <div className=\"flex items-center\">\n          <img src={logoImage} alt=\"Game Logo\" className=\"h-8 mr-3\" style={{imageRendering: 'pixelated'}} />\n          <span className=\"text-white text-lg\">Welcome, </span>\n          <span className=\"text-lg font-bold\" style={{color: '#53d493'}}>Player one</span>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <button \n            className=\"bg-red-600 text-white px-3 py-1 text-sm hover:bg-red-700 border-2 border-red-500 font-retro\"\n          >\n            Logout\n          </button>\n        </div>\n      </div>\n\n      {/* Main Content Container */}\n      <div className=\"flex justify-center items-center min-h-[calc(100vh-200px)]\">\n        <div className=\"w-full max-w-4xl px-4\">\n          \n          {/* Title Section */}\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-white text-4xl font-bold mb-2 font-retro tracking-wider\">\n              PumpGames<span style={{color: '#53d493'}}>.fun</span>\n            </h1>\n            <p className=\"text-gray-300 text-lg font-retro\">Play,Earn,Have Fun!</p>\n          </div>\n\n          {/* Main Game Area - Three Column Layout */}\n          <div className=\"grid grid-cols-3 gap-6 max-w-5xl mx-auto\">\n            \n            {/* Left Panel - Leaderboard */}\n            <div className=\"bg-gray-800 p-3 border-2 border-gray-600 flex flex-col self-start\">\n              <h3 className=\"text-yellow-400 text-sm mb-2 font-retro flex items-center\">\n                🏆 Leaderboard\n              </h3>\n              <div className=\"text-white text-xs space-y-1 font-retro mb-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"truncate\">1. TokyOnTop</span>\n                  <span style={{color: '#53d493'}}>${1600}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"truncate\">2. Sergio_Jew</span>\n                  <span style={{color: '#53d493'}}>${1255}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"truncate\">3. 1$_to_1k</span>\n                  <span style={{color: '#53d493'}}>${964}</span>\n                </div>\n              </div>\n              <button className=\"bg-gray-700 text-white px-2 py-1 text-sm border-2 border-gray-600 hover:bg-gray-600 font-retro w-full\">\n                View Full Board\n              </button>\n            </div>\n\n            {/* Center Panel - Game Controls */}\n            <div className=\"bg-gray-800 p-3 border-2 border-gray-600\">\n              \n              {/* Username with edit icon */}\n              <div className=\"flex items-center justify-between mb-3 bg-gray-700 px-3 py-2 border-2 border-gray-600\">\n                <span className=\"text-gray-300 font-retro text-xs\">〈Username〉</span>\n                <Edit3 className=\"w-3 h-3 text-gray-400 hover:text-white cursor-pointer\" />\n              </div>\n              \n              {/* Bet Amount Selection */}\n              <div className=\"grid grid-cols-3 gap-1 mb-3\">\n                <button \n                  onClick={() => setSelectedBetAmount(1)}\n                  className={`py-2 px-3 text-sm border-2 font-retro ${\n                    selectedBetAmount === 1 \n                      ? 'text-white border-2' \n                      : 'bg-gray-700 text-white border-gray-600 hover:bg-gray-600'\n                  }`}\n                  style={selectedBetAmount === 1 ? {backgroundColor: '#53d493', borderColor: '#53d493'} : {}}\n                >\n                  $1\n                </button>\n                <div className=\"relative group\">\n                  <button \n                    disabled\n                    className=\"py-2 px-3 text-sm border-2 font-retro bg-gray-700 text-white border-gray-600 cursor-not-allowed w-full group-hover:bg-gray-800 group-hover:text-gray-500 group-hover:border-gray-700 transition-colors\"\n                  >\n                    $5\n                  </button>\n                  <div className=\"absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none\">\n                    <svg className=\"w-4 h-4 text-white\" viewBox=\"0 0 16 16\" style={{imageRendering: 'pixelated'}}>\n                      <rect x=\"5\" y=\"7\" width=\"6\" height=\"6\" fill=\"currentColor\"/>\n                      <rect x=\"4\" y=\"6\" width=\"1\" height=\"1\" fill=\"currentColor\"/>\n                      <rect x=\"11\" y=\"6\" width=\"1\" height=\"1\" fill=\"currentColor\"/>\n                      <rect x=\"4\" y=\"5\" width=\"1\" height=\"1\" fill=\"currentColor\"/>\n                      <rect x=\"11\" y=\"5\" width=\"1\" height=\"1\" fill=\"currentColor\"/>\n                      <rect x=\"6\" y=\"4\" width=\"4\" height=\"1\" fill=\"currentColor\"/>\n                      <rect x=\"6\" y=\"3\" width=\"4\" height=\"1\" fill=\"currentColor\"/>\n                      <rect x=\"7\" y=\"2\" width=\"2\" height=\"1\" fill=\"currentColor\"/>\n                      <rect x=\"7\" y=\"9\" width=\"2\" height=\"1\" fill=\"currentColor\"/>\n                    </svg>\n                  </div>\n                </div>\n                <div className=\"relative group\">\n                  <button \n                    disabled\n                    className=\"py-2 px-3 text-sm border-2 font-retro bg-gray-700 text-white border-gray-600 cursor-not-allowed w-full group-hover:bg-gray-800 group-hover:text-gray-500 group-hover:border-gray-700 transition-colors\"\n                  >\n                    $20\n                  </button>\n                  <div className=\"absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none\">\n                    <svg className=\"w-4 h-4 text-white\" viewBox=\"0 0 16 16\" style={{imageRendering: 'pixelated'}}>\n                      <rect x=\"5\" y=\"7\" width=\"6\" height=\"6\" fill=\"currentColor\"/>\n                      <rect x=\"4\" y=\"6\" width=\"1\" height=\"1\" fill=\"currentColor\"/>\n                      <rect x=\"11\" y=\"6\" width=\"1\" height=\"1\" fill=\"currentColor\"/>\n                      <rect x=\"4\" y=\"5\" width=\"1\" height=\"1\" fill=\"currentColor\"/>\n                      <rect x=\"11\" y=\"5\" width=\"1\" height=\"1\" fill=\"currentColor\"/>\n                      <rect x=\"6\" y=\"4\" width=\"4\" height=\"1\" fill=\"currentColor\"/>\n                      <rect x=\"6\" y=\"3\" width=\"4\" height=\"1\" fill=\"currentColor\"/>\n                      <rect x=\"7\" y=\"2\" width=\"2\" height=\"1\" fill=\"currentColor\"/>\n                      <rect x=\"7\" y=\"9\" width=\"2\" height=\"1\" fill=\"currentColor\"/>\n                    </svg>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Region Selection */}\n              <div className=\"mb-3\">\n                <div className=\"text-white text-xs mb-2 font-retro text-center\">Server Region</div>\n                <div className=\"grid grid-cols-3 gap-1\">\n                  <button \n                    onClick={() => handleStartGameWithRegion('us')}\n                    className=\"py-2 px-2 text-xs border-2 font-retro bg-gray-700 text-white border-gray-600 hover:bg-gray-600 transition-colors\"\n                    disabled={isDetectingRegion}\n                  >\n                    🇺🇸 US\n                  </button>\n                  <button \n                    onClick={() => handleStartGameWithRegion('eu')}\n                    className=\"py-2 px-2 text-xs border-2 font-retro bg-gray-700 text-white border-gray-600 hover:bg-gray-600 transition-colors\"\n                    disabled={isDetectingRegion}\n                  >\n                    🇪🇺 EU\n                  </button>\n                  <button \n                    onClick={() => handleStartGameWithRegion()}\n                    className=\"py-2 px-2 text-xs border-2 font-retro border-gray-600 hover:bg-gray-600 transition-colors\"\n                    style={{backgroundColor: '#53d493', borderColor: '#53d493', color: 'white'}}\n                    disabled={isDetectingRegion}\n                  >\n                    🌍 Auto\n                  </button>\n                </div>\n              </div>\n\n              {/* Play Button */}\n              <button \n                onClick={() => handleStartGameWithRegion()}\n                className=\"text-white font-bold text-lg py-3 w-full mb-3 font-retro transition-colors border-2\"\n                style={{backgroundColor: '#53d493', borderColor: '#53d493'}}\n                onMouseEnter={(e) => (e.target as HTMLButtonElement).style.backgroundColor = '#4ac785'}\n                onMouseLeave={(e) => (e.target as HTMLButtonElement).style.backgroundColor = '#53d493'}\n                disabled={isDetectingRegion}\n              >\n                {isDetectingRegion ? 'DETECTING...' : 'PLAY'}\n              </button>\n              \n\n              \n              {/* Stats at bottom */}\n              <div className=\"grid grid-cols-2 gap-2 text-center border-t border-gray-600 pt-2\">\n                <div>\n                  <div className=\"text-white font-bold text-sm font-retro\">{animatedPlayerCount}</div>\n                  <div className=\"text-gray-400 text-xs font-retro\">Players Online</div>\n                </div>\n                <div>\n                  <div className=\"text-white font-bold text-sm font-retro\">+${dailyWinnings.toLocaleString()}</div>\n                  <div className=\"text-gray-400 text-xs font-retro\">Global Winnings (24hr)</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Right Panel - Wallet */}\n            <div className=\"bg-gray-800 p-3 border-2 border-gray-600 flex flex-col self-start\">\n              <h3 className=\"text-white text-sm mb-3 font-retro\">Wallet</h3>\n              \n              {/* Balance Display */}\n              <div className=\"font-bold text-lg mb-3 text-center bg-gray-900 py-3 border-2 border-gray-600 font-retro\" style={{color: '#53d493'}}>\n                $984.37\n              </div>\n              \n              {/* Wallet buttons */}\n              <div className=\"grid grid-cols-2 gap-1\">\n                <button className=\"bg-gray-700 text-white py-1 px-2 text-sm border-2 border-gray-600 hover:bg-gray-600 font-retro\">\n                  Top Up\n                </button>\n                <button className=\"bg-gray-700 text-white py-1 px-2 text-sm border-2 border-gray-600 hover:bg-gray-600 font-retro\">\n                  Withdraw\n                </button>\n              </div>\n            </div>\n\n          </div>\n\n        </div>\n      </div>\n      \n      </div> {/* End content wrapper */}\n      {/* Celebration Popup */}\n      {showCelebration && (\n        <div className=\"fixed inset-0 z-[60] bg-black/90 flex items-center justify-center\">\n          {/* Confetti Animation */}\n          <div className=\"absolute inset-0 overflow-hidden\">\n            {Array.from({ length: 50 }).map((_, i) => (\n              <div\n                key={i}\n                className=\"absolute animate-pulse\"\n                style={{\n                  left: `${Math.random() * 100}%`,\n                  top: `${Math.random() * 100}%`,\n                  animation: `confetti-fall ${2 + Math.random() * 3}s linear infinite`,\n                  animationDelay: `${Math.random() * 2}s`\n                }}\n              >\n                <div\n                  className=\"w-2 h-2 rotate-45\"\n                  style={{\n                    backgroundColor: ['#ffd700', '#ff6b6b', '#4ecdc4', '#95e1d3', '#f38ba8'][Math.floor(Math.random() * 5)]\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n          \n          {/* Celebration Content */}\n          <div className=\"relative bg-gray-900/95 border border-yellow-400/30 rounded-2xl p-8 text-center max-w-md mx-4 shadow-2xl\">\n            {/* Trophy Background */}\n            <div className=\"absolute inset-0 flex items-center justify-center opacity-10\">\n              <Trophy className=\"w-64 h-64 text-yellow-400\" />\n            </div>\n            \n            {/* Content */}\n            <div className=\"relative z-10\">\n              <div className=\"mb-6\">\n                <Trophy className=\"w-16 h-16 text-yellow-400 mx-auto mb-4 animate-bounce\" />\n                <h2 className=\"text-3xl font-bold text-yellow-400 mb-2\">\n                  Cash Out Complete!\n                </h2>\n                <p className=\"text-gray-300 text-lg\">\n                  Congratulations on your profit!\n                </p>\n              </div>\n              \n              <div className=\"mb-8\">\n                <div className=\"text-5xl font-bold text-green-400 mb-2\">\n                  ${cashOutAmount.toFixed(2)}\n                </div>\n                <div className=\"text-gray-400\">\n                  Successfully cashed out\n                </div>\n              </div>\n              \n              <Button\n                onClick={() => setShowCelebration(false)}\n                className=\"bg-yellow-400 hover:bg-yellow-500 text-black font-bold px-8 py-3 rounded-lg\"\n                data-testid=\"button-close-celebration\"\n              >\n                <X className=\"w-4 h-4 mr-2\" />\n                Continue\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Game Over Popup */}\n      {showGameOver && (\n        <div className=\"fixed inset-0 z-[60] bg-black/90 flex items-center justify-center\">\n          {/* Game Over Content */}\n          <div className=\"relative bg-gray-900/95 border border-red-400/30 rounded-2xl p-8 text-center max-w-md mx-4 shadow-2xl\">\n            {/* Content */}\n            <div className=\"relative z-10\">\n              <div className=\"mb-6\">\n                <div className=\"w-16 h-16 mx-auto mb-4 bg-red-500/20 rounded-full flex items-center justify-center\">\n                  <div className=\"text-4xl\">💀</div>\n                </div>\n                <h2 className=\"text-3xl font-bold text-red-400 mb-2\">\n                  Game Over\n                </h2>\n                <p className=\"text-gray-300 text-lg\">\n                  Better luck next time!\n                </p>\n              </div>\n              \n              <div className=\"mb-8\">\n                <div className=\"bg-gray-800/50 rounded-lg p-6\">\n                  <div className=\"text-sm text-gray-400 mb-2\">Time Survived</div>\n                  <div className=\"text-4xl font-bold text-white\">\n                    {Math.floor(gameOverData.timeAlive / 60)}:{String(gameOverData.timeAlive % 60).padStart(2, '0')}\n                  </div>\n                </div>\n              </div>\n              \n              <Button\n                onClick={() => setShowGameOver(false)}\n                className=\"bg-red-500 hover:bg-red-600 text-white font-bold px-8 py-3 rounded-lg\"\n                data-testid=\"button-close-game-over\"\n              >\n                <X className=\"w-4 h-4 mr-2\" />\n                Continue\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":33919},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/wallet.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Copy, RefreshCw, Plus, DollarSign } from \"lucide-react\";\n\nexport function Wallet() {\n  const { user, updateUser } = useAuth();\n  const { toast } = useToast();\n  const [isAddFundsOpen, setIsAddFundsOpen] = useState(false);\n  const [isCashOutOpen, setIsCashOutOpen] = useState(false);\n  const [addAmount, setAddAmount] = useState(\"\");\n  const [cashOutAmount, setCashOutAmount] = useState(\"\");\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  if (!user) return null;\n\n  const handleCopyAddress = () => {\n    const mockAddress = `${user.id.slice(0, 8)}...${user.id.slice(-8)}`;\n    navigator.clipboard.writeText(mockAddress);\n    toast({\n      title: \"Address Copied\",\n      description: \"Wallet address copied to clipboard\",\n    });\n  };\n\n  const handleRefreshBalance = async () => {\n    setIsRefreshing(true);\n    try {\n      // Simulate balance refresh - in real app would call blockchain API\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      toast({\n        title: \"Balance Refreshed\",\n        description: \"Wallet balance has been updated\",\n      });\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  const handleAddFunds = async () => {\n    const amount = parseFloat(addAmount);\n    if (isNaN(amount) || amount <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const response = await apiRequest(\"POST\", `/api/users/${user.id}/update-balance`, {\n        amount: amount\n      });\n      const updatedUser = await response.json();\n      updateUser(updatedUser);\n      \n      setIsAddFundsOpen(false);\n      setAddAmount(\"\");\n      \n      toast({\n        title: \"Funds Added\",\n        description: `Successfully added $${amount.toFixed(2)} to your wallet`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add funds\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCashOut = async () => {\n    const amount = parseFloat(cashOutAmount);\n    const userBalance = parseFloat(user.balance);\n    \n    if (isNaN(amount) || amount <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (amount > userBalance) {\n      toast({\n        title: \"Insufficient Balance\",\n        description: \"You don't have enough funds to cash out this amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const response = await apiRequest(\"POST\", `/api/users/${user.id}/update-balance`, {\n        amount: -amount\n      });\n      const updatedUser = await response.json();\n      updateUser(updatedUser);\n      \n      setIsCashOutOpen(false);\n      setCashOutAmount(\"\");\n      \n      toast({\n        title: \"Cash Out Successful\",\n        description: `Successfully withdrew $${amount.toFixed(2)} from your wallet`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to cash out\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Card className=\"bg-dark-card border-dark-border border-l-4 border-l-neon-green\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-bold text-white\">Wallet</CardTitle>\n            <div className=\"flex space-x-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleCopyAddress}\n                className=\"text-gray-400 hover:text-white transition-colors\"\n                title=\"Copy wallet address\"\n              >\n                <Copy className=\"w-5 h-5\" />\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleRefreshBalance}\n                disabled={isRefreshing}\n                className=\"text-gray-400 hover:text-white transition-colors\"\n                title=\"Refresh balance\"\n              >\n                <RefreshCw className={`w-5 h-5 ${isRefreshing ? 'animate-spin' : ''}`} />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Balance display */}\n          <div className=\"text-center\">\n            <div className=\"neon-yellow text-4xl font-bold mb-1\">\n              ${parseFloat(user.balance).toFixed(2)}\n            </div>\n            <div className=\"text-gray-400 text-sm\">\n              {parseFloat(user.solBalance).toFixed(8)} SOL\n            </div>\n          </div>\n\n          {/* Action buttons */}\n          <div className=\"grid grid-cols-2 gap-3\">\n            <Dialog open={isAddFundsOpen} onOpenChange={setIsAddFundsOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-neon-green text-black font-semibold hover:bg-green-400 transition-colors\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Funds\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"bg-dark-card border-dark-border text-white\">\n                <DialogHeader>\n                  <DialogTitle>Add Funds</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <Input\n                    type=\"number\"\n                    placeholder=\"Amount in USD\"\n                    value={addAmount}\n                    onChange={(e) => setAddAmount(e.target.value)}\n                    className=\"bg-dark-bg border-dark-border\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n                  <div className=\"text-sm text-gray-400\">\n                    Minimum: $1.00 • Maximum: $500.00\n                  </div>\n                  <Button \n                    onClick={handleAddFunds}\n                    className=\"w-full bg-neon-green text-black hover:bg-green-400\"\n                  >\n                    Add Funds\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog open={isCashOutOpen} onOpenChange={setIsCashOutOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-neon-blue text-white font-semibold hover:bg-blue-600 transition-colors\">\n                  <DollarSign className=\"w-4 h-4 mr-2\" />\n                  Cash Out\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"bg-dark-card border-dark-border text-white\">\n                <DialogHeader>\n                  <DialogTitle>Cash Out</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <Input\n                    type=\"number\"\n                    placeholder=\"Amount in USD\"\n                    value={cashOutAmount}\n                    onChange={(e) => setCashOutAmount(e.target.value)}\n                    className=\"bg-dark-bg border-dark-border\"\n                    min=\"0\"\n                    max={parseFloat(user.balance)}\n                    step=\"0.01\"\n                  />\n                  <div className=\"text-sm text-gray-400\">\n                    Available: ${parseFloat(user.balance).toFixed(2)} • Minimum: $1.00\n                  </div>\n                  <Button \n                    onClick={handleCashOut}\n                    className=\"w-full bg-neon-blue text-white hover:bg-blue-600\"\n                  >\n                    Cash Out\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardContent>\n      </Card>\n    </>\n  );\n}\n","size_bytes":8239},"server/gameServer.ts":{"content":"import { WebSocketServer, WebSocket } from \"ws\";\nimport type { Server } from \"http\";\n\ninterface GameWorld {\n  bots: any[];\n  players: Map<string, any>;\n  initialized: boolean;\n}\n\ninterface GameServerInstance {\n  wss: WebSocketServer;\n  activePlayers: Map<string, any>;\n  gameWorld: GameWorld;\n  serverId: number;\n}\n\nexport class MultiServerManager {\n  private static readonly MAX_PLAYERS_PER_SERVER = 8;\n  private gameServers = new Map<number, GameServerInstance>();\n  private nextServerId = 0;\n  \n  constructor(private httpServer: Server) {}\n  \n  createGameServer(serverId: number): GameServerInstance {\n    const wss = new WebSocketServer({ \n      server: this.httpServer, \n      path: `/ws/${serverId}`,\n      perMessageDeflate: false, // Disable compression\n      maxPayload: 1024 * 1024, // 1MB max payload\n      skipUTF8Validation: false, // Keep UTF8 validation\n      clientTracking: true\n    });\n    \n    const activePlayers = new Map<string, any>();\n    \n    const gameWorld: GameWorld = {\n      bots: [],\n      players: new Map(),\n      initialized: false\n    };\n    \n    const serverInstance: GameServerInstance = {\n      wss,\n      activePlayers,\n      gameWorld,\n      serverId\n    };\n    \n    this.gameServers.set(serverId, serverInstance);\n    this.setupServerWebSocket(serverInstance);\n    console.log(`🚀 Created game server ${serverId} (path: /ws/${serverId})`);\n    \n    return serverInstance;\n  }\n  \n  getAvailableServer(): GameServerInstance {\n    // Find server with available slots\n    for (const [id, server] of Array.from(this.gameServers.entries())) {\n      if (server.activePlayers.size < MultiServerManager.MAX_PLAYERS_PER_SERVER) {\n        return server;\n      }\n    }\n    \n    // All servers full, create new one\n    const newServer = this.createGameServer(this.nextServerId++);\n    console.log(`📈 All servers full! Created new server ${newServer.serverId}`);\n    return newServer;\n  }\n  \n  initialize() {\n    // Create initial server\n    this.createGameServer(this.nextServerId++);\n    \n    // Setup legacy WebSocket for backwards compatibility\n    const legacyWss = new WebSocketServer({ \n      server: this.httpServer, \n      path: '/ws',\n      perMessageDeflate: false // Disable compression to fix RSV1 frame errors\n    });\n    legacyWss.on('connection', (ws) => {\n      ws.close(1000, 'Please connect to /ws/0 or use the server selection API');\n    });\n    \n    // Broadcast game state for all servers\n    this.startBroadcasting();\n  }\n  \n  private setupServerWebSocket(serverInstance: GameServerInstance) {\n    const { wss, activePlayers, gameWorld, serverId } = serverInstance;\n    \n    wss.on(\"connection\", (ws: any) => {\n      // Check server capacity\n      if (activePlayers.size >= MultiServerManager.MAX_PLAYERS_PER_SERVER) {\n        console.log(`Server ${serverId} full, rejecting connection`);\n        ws.close(1013, 'Server full');\n        return;\n      }\n\n      const playerId = `player_${Date.now()}_${Math.random()}`;\n      console.log(`Player ${playerId} joined server ${serverId}. Active: ${wss.clients.size}`);\n      \n      ws.playerId = playerId;\n      \n      const colors = ['#d55400', '#4ecdc4', '#ff6b6b', '#45b7d1', '#96ceb4', '#feca57', '#ff9ff3', '#54a0ff'];\n      const playerColor = colors[activePlayers.size % colors.length];\n      \n      const player = {\n        id: playerId,\n        segments: [],\n        color: playerColor,\n        money: 1.00,\n        lastUpdate: Date.now()\n      };\n      \n      activePlayers.set(playerId, player);\n      gameWorld.players.set(playerId, player);\n\n      // Initialize game world if needed\n      this.initializeGameWorld(gameWorld);\n\n      // Send consolidated welcome message with all initial data\n      try {\n        const welcomeMessage = {\n          type: 'welcome',\n          playerId: playerId,\n          initialState: {\n            players: Array.from(activePlayers.values()),\n            bots: gameWorld.bots,\n            gameWorld: Array.from(gameWorld.players.values())\n          }\n        };\n        \n        // Send smaller welcome message to avoid frame issues\n        const simpleWelcome = {\n          type: 'welcome',\n          playerId: playerId\n        };\n        \n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify(simpleWelcome));\n          \n          // Send other data separately with delay\n          setTimeout(() => {\n            if (ws.readyState === WebSocket.OPEN) {\n              ws.send(JSON.stringify({\n                type: 'initial_players', \n                players: Array.from(activePlayers.values())\n              }));\n            }\n          }, 50);\n        }\n      } catch (error) {\n        console.error(`Error sending welcome message to ${playerId}:`, error);\n      }\n\n      ws.on(\"message\", (message: any) => {\n        try {\n          const data = JSON.parse(message.toString());\n          if (data.type === 'update') {\n            this.handlePlayerUpdate(data, playerId, serverInstance, ws);\n          }\n        } catch (error) {\n          console.error(\"WebSocket message error:\", error);\n          // Don't close connection for parsing errors\n        }\n      });\n\n      ws.on(\"close\", (code: number, reason: Buffer) => {\n        console.log(`Player ${playerId} left server ${serverId}. Code: ${code}, Remaining: ${wss.clients.size - 1}`);\n        activePlayers.delete(playerId);\n        gameWorld.players.delete(playerId);\n      });\n\n      ws.on(\"error\", (error: any) => {\n        console.error(`WebSocket error for player ${playerId}:`, error);\n        // Don't immediately close on protocol errors - let the client retry\n        if (!error.message?.includes('RSV1') && !error.message?.includes('Invalid WebSocket frame')) {\n          activePlayers.delete(playerId);\n          gameWorld.players.delete(playerId);\n        }\n      });\n    });\n  }\n  \n  private handlePlayerUpdate(data: any, playerId: string, serverInstance: GameServerInstance, ws: any) {\n    const { activePlayers, gameWorld } = serverInstance;\n    const existingPlayer = activePlayers.get(playerId);\n    \n    // Enforce 100-segment and 100-mass limits\n    const MAX_SEGMENTS = 100;\n    const MAX_MASS = 100;\n    const segments = data.segments || [];\n    const limitedSegments = segments.length > MAX_SEGMENTS ? segments.slice(0, MAX_SEGMENTS) : segments;\n    const limitedMass = Math.min(data.totalMass || 6, MAX_MASS);\n    \n    const player = {\n      id: playerId,\n      segments: limitedSegments,\n      color: existingPlayer?.color || '#d55400',\n      money: data.money || 1.00,\n      totalMass: limitedMass,\n      segmentRadius: data.segmentRadius || 8,\n      visibleSegmentCount: Math.min(data.visibleSegmentCount || 0, MAX_SEGMENTS),\n      lastUpdate: Date.now()\n    };\n    \n    // Check for collisions with other players\n    const currentPlayerHead = data.segments && data.segments.length > 0 ? data.segments[0] : null;\n    if (currentPlayerHead && data.segmentRadius) {\n      let collisionDetected = false;\n      \n      for (const [otherPlayerId, otherPlayer] of Array.from(gameWorld.players.entries())) {\n        if (otherPlayerId === playerId) continue;\n        if (!otherPlayer.segments || otherPlayer.segments.length === 0) continue;\n        \n        for (const segment of otherPlayer.segments) {\n          const dx = currentPlayerHead.x - segment.x;\n          const dy = currentPlayerHead.y - segment.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          const collisionThreshold = data.segmentRadius + (otherPlayer.segmentRadius || 8) - 2;\n          \n          if (distance < collisionThreshold) {\n            collisionDetected = true;\n            activePlayers.delete(playerId);\n            gameWorld.players.delete(playerId);\n            \n            if (ws.readyState === WebSocket.OPEN) {\n              ws.send(JSON.stringify({\n                type: 'death',\n                reason: 'collision',\n                crashedInto: otherPlayerId\n              }));\n            }\n            \n            console.log(`💀 Player ${playerId} removed from server (collision)`);\n            break;\n          }\n        }\n        if (collisionDetected) break;\n      }\n      \n      if (!collisionDetected) {\n        activePlayers.set(playerId, player);\n        gameWorld.players.set(playerId, player);\n      }\n    } else {\n      activePlayers.set(playerId, player);\n      gameWorld.players.set(playerId, player);\n    }\n  }\n  \n  private initializeGameWorld(gameWorld: GameWorld) {\n    if (gameWorld.initialized) return;\n    \n    gameWorld.bots = [];\n    // Food system completely removed per user request\n    \n    gameWorld.initialized = true;\n    console.log('Game world initialized (no food, multiplayer only)');\n  }\n  \n  private startBroadcasting() {\n    setInterval(() => {\n      this.gameServers.forEach((serverInstance) => {\n        const { wss, gameWorld, serverId } = serverInstance;\n        \n        if (wss.clients.size > 0) {\n          const worldMessage = JSON.stringify({\n            type: 'gameWorld',\n            bots: gameWorld.bots,\n            players: Array.from(gameWorld.players.values())\n          });\n          \n          console.log(`Broadcasting to ${wss.clients.size} clients on server ${serverId}: ${gameWorld.players.size} players`);\n          \n          wss.clients.forEach((client: any) => {\n            if (client.readyState === WebSocket.OPEN) {\n              try {\n                client.send(worldMessage);\n              } catch (error) {\n                console.error('Broadcast error:', error);\n                client.terminate();\n              }\n            } else {\n              client.terminate();\n            }\n          });\n        }\n      });\n    }, 100);\n  }\n}","size_bytes":9667},"server/httpMultiplayer.ts":{"content":"import type { Express } from \"express\";\n\ninterface Player {\n  id: string;\n  segments: Array<{ x: number; y: number }>;\n  color: string;\n  money: number;\n  totalMass: number;\n  segmentRadius: number;\n  visibleSegmentCount: number;\n  lastUpdate: number;\n}\n\ninterface GameRoom {\n  players: Map<string, Player>;\n  lastActivity: number;\n}\n\nexport class HttpMultiplayerManager {\n  private static readonly MAX_PLAYERS_PER_ROOM = 8;\n  private static readonly ROOM_TIMEOUT = 30000; // 30 seconds\n  private gameRooms = new Map<number, GameRoom>();\n  private nextRoomId = 0;\n\n  setupRoutes(app: Express) {\n    // Get available room\n    app.get('/api/multiplayer/room', (req, res) => {\n      const room = this.getAvailableRoom();\n      res.json({ roomId: room.id });\n    });\n\n    // Update player position\n    app.post('/api/multiplayer/update', (req, res) => {\n      const { roomId, playerId, segments, color, money, totalMass, segmentRadius, visibleSegmentCount } = req.body;\n      \n      if (!roomId || !playerId) {\n        return res.status(400).json({ error: 'Missing roomId or playerId' });\n      }\n\n      const room = this.gameRooms.get(roomId);\n      if (!room) {\n        return res.status(404).json({ error: 'Room not found' });\n      }\n\n      // Enforce 100-segment and 100-mass limits\n      const MAX_SEGMENTS = 100;\n      const MAX_MASS = 100;\n      const limitedSegments = (segments || []).slice(0, MAX_SEGMENTS);\n      const limitedMass = Math.min(totalMass || 6, MAX_MASS);\n\n      const player: Player = {\n        id: playerId,\n        segments: limitedSegments,\n        color: color || '#d55400',\n        money: money || 1.00,\n        totalMass: limitedMass,\n        segmentRadius: segmentRadius || 8,\n        visibleSegmentCount: Math.min(visibleSegmentCount || 0, MAX_SEGMENTS),\n        lastUpdate: Date.now()\n      };\n\n      room.players.set(playerId, player);\n      room.lastActivity = Date.now();\n\n      res.json({ success: true });\n    });\n\n    // Get room state\n    app.get('/api/multiplayer/state/:roomId', (req, res) => {\n      const roomId = parseInt(req.params.roomId);\n      const room = this.gameRooms.get(roomId);\n      \n      if (!room) {\n        return res.status(404).json({ error: 'Room not found' });\n      }\n\n      // Remove stale players (haven't updated in 10 seconds)\n      const now = Date.now();\n      Array.from(room.players.entries()).forEach(([playerId, player]) => {\n        if (now - player.lastUpdate > 10000) {\n          room.players.delete(playerId);\n        }\n      });\n\n      const players = Array.from(room.players.values());\n      res.json({ players });\n    });\n\n    // Cleanup old rooms periodically\n    setInterval(() => {\n      const now = Date.now();\n      Array.from(this.gameRooms.entries()).forEach(([roomId, room]) => {\n        if (now - room.lastActivity > HttpMultiplayerManager.ROOM_TIMEOUT) {\n          this.gameRooms.delete(roomId);\n          console.log(`🧹 Cleaned up inactive room ${roomId}`);\n        }\n      });\n    }, 15000); // Check every 15 seconds\n  }\n\n  private getAvailableRoom(): { id: number } {\n    // Find room with available slots\n    for (const [id, room] of Array.from(this.gameRooms.entries())) {\n      if (room.players.size < HttpMultiplayerManager.MAX_PLAYERS_PER_ROOM) {\n        return { id };\n      }\n    }\n\n    // All rooms full, create new one\n    const newRoomId = this.nextRoomId++;\n    const newRoom: GameRoom = {\n      players: new Map(),\n      lastActivity: Date.now()\n    };\n    \n    this.gameRooms.set(newRoomId, newRoom);\n    console.log(`🚀 Created new multiplayer room ${newRoomId}`);\n    \n    return { id: newRoomId };\n  }\n}","size_bytes":3619},"client/src/lib/regionDetection.ts":{"content":"// Region detection utilities for geographic server routing\n\nexport type Region = 'us' | 'eu';\n\n// European countries for IP geolocation detection\nconst EU_COUNTRIES = [\n  'DE', 'FR', 'IT', 'ES', 'NL', 'BE', 'PL', 'AT', 'SE', 'NO', 'DK', 'FI', \n  'IE', 'PT', 'CZ', 'HU', 'RO', 'BG', 'HR', 'SI', 'SK', 'LT', 'LV', 'EE', \n  'LU', 'MT', 'CY', 'GR', 'GB'\n];\n\n// Method 1: IP Geolocation Detection (Primary)\nconst detectUserRegionByIP = async (): Promise<Region> => {\n  try {\n    const response = await fetch('https://ipapi.co/json/', {\n      timeout: 3000, // 3 second timeout\n    });\n    \n    if (!response.ok) {\n      throw new Error('IP geolocation API failed');\n    }\n    \n    const data = await response.json();\n    console.log(`Detected country: ${data.country_code}`);\n    \n    return EU_COUNTRIES.includes(data.country_code) ? 'eu' : 'us';\n  } catch (error) {\n    console.warn('IP geolocation failed:', error);\n    throw error;\n  }\n};\n\n// Method 2: Timezone Detection (Backup)\nconst detectRegionByTimezone = (): Region => {\n  try {\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    console.log(`Detected timezone: ${timezone}`);\n    \n    // European timezones\n    const isEuropeanTimezone = timezone.startsWith('Europe/') || \n                              timezone === 'GMT' || \n                              timezone === 'UTC' ||\n                              timezone.includes('London') ||\n                              timezone.includes('Berlin') ||\n                              timezone.includes('Paris');\n    \n    return isEuropeanTimezone ? 'eu' : 'us';\n  } catch (error) {\n    console.warn('Timezone detection failed:', error);\n    return 'us'; // Default fallback\n  }\n};\n\n// Method 3: Combined Approach (Recommended)\nexport const detectBestRegion = async (): Promise<Region> => {\n  try {\n    console.log('Attempting IP geolocation detection...');\n    const ipRegion = await detectUserRegionByIP();\n    console.log(`IP geolocation result: ${ipRegion}`);\n    return ipRegion;\n  } catch {\n    console.log('IP geolocation failed, falling back to timezone detection...');\n    const timezoneRegion = detectRegionByTimezone();\n    console.log(`Timezone detection result: ${timezoneRegion}`);\n    return timezoneRegion;\n  }\n};\n\n// Get stored user preference or detect automatically\nexport const getUserPreferredRegion = async (): Promise<Region> => {\n  // Check if user has manually selected a region before\n  const storedRegion = localStorage.getItem('preferred-region') as Region;\n  \n  if (storedRegion && (storedRegion === 'us' || storedRegion === 'eu')) {\n    console.log(`Using stored region preference: ${storedRegion}`);\n    return storedRegion;\n  }\n  \n  // Auto-detect if no preference stored\n  const detectedRegion = await detectBestRegion();\n  console.log(`Auto-detected region: ${detectedRegion}`);\n  return detectedRegion;\n};\n\n// Store user's manual region selection\nexport const setUserRegionPreference = (region: Region): void => {\n  localStorage.setItem('preferred-region', region);\n  console.log(`Stored region preference: ${region}`);\n};\n\n// Clear stored preference (for auto-detect)\nexport const clearRegionPreference = (): void => {\n  localStorage.removeItem('preferred-region');\n  console.log('Cleared region preference - will auto-detect');\n};","size_bytes":3294},"public/sw.js":{"content":"// Service Worker for Snake Game Background Sync\n// Keeps the game state synchronized even when the browser tab is inactive\n\nconst CACHE_NAME = 'snake-game-v1';\nconst SW_VERSION = '1.0.0';\n\n// Game state storage\nlet gameState = {\n  isGameActive: false,\n  snakePosition: { x: 0, y: 0 },\n  snakeAngle: 0,\n  snakeSpeed: 2.0,\n  isBoosting: false,\n  lastUpdate: 0,\n  playerId: null,\n  roomId: null,\n  wsUrl: null\n};\n\n// Background sync interval\nlet backgroundSyncInterval = null;\nconst SYNC_INTERVAL = 33; // 30 FPS background updates\n\n// WebSocket connection for background sync\nlet backgroundWS = null;\n\nconsole.log(`🔧 Service Worker ${SW_VERSION} initializing...`);\n\n// Install event\nself.addEventListener('install', event => {\n  console.log('🔧 Service Worker installing...');\n  self.skipWaiting();\n});\n\n// Activate event\nself.addEventListener('activate', event => {\n  console.log('🔧 Service Worker activated');\n  event.waitUntil(self.clients.claim());\n});\n\n// Message handling from main thread\nself.addEventListener('message', event => {\n  const { type, data } = event.data;\n  \n  switch (type) {\n    case 'GAME_START':\n      console.log('🎮 SW: Game started, initializing background sync');\n      gameState = {\n        ...gameState,\n        isGameActive: true,\n        playerId: data.playerId,\n        roomId: data.roomId,\n        wsUrl: data.wsUrl,\n        snakePosition: data.snakePosition || { x: 0, y: 0 },\n        snakeAngle: data.snakeAngle || 0,\n        snakeSpeed: data.snakeSpeed || 2.0,\n        lastUpdate: Date.now()\n      };\n      startBackgroundSync();\n      break;\n      \n    case 'GAME_UPDATE':\n      if (gameState.isGameActive) {\n        gameState.snakePosition = data.snakePosition;\n        gameState.snakeAngle = data.snakeAngle;\n        gameState.snakeSpeed = data.snakeSpeed;\n        gameState.isBoosting = data.isBoosting || false;\n        gameState.lastUpdate = Date.now();\n      }\n      break;\n      \n    case 'GAME_STOP':\n      console.log('🛑 SW: Game stopped, clearing background sync');\n      gameState.isGameActive = false;\n      stopBackgroundSync();\n      closeBackgroundWS();\n      break;\n      \n    case 'VISIBILITY_CHANGE':\n      if (data.hidden && gameState.isGameActive) {\n        console.log('📱 SW: Tab became inactive, starting background movement');\n        startBackgroundSync();\n      } else if (!data.hidden) {\n        console.log('📱 SW: Tab became active, stopping background movement');\n        stopBackgroundSync();\n      }\n      break;\n  }\n});\n\n// Start background sync when tab is inactive\nfunction startBackgroundSync() {\n  if (backgroundSyncInterval) return; // Already running\n  \n  console.log('🔄 SW: Starting background sync interval');\n  backgroundSyncInterval = setInterval(() => {\n    if (!gameState.isGameActive) {\n      stopBackgroundSync();\n      return;\n    }\n    \n    // Simulate snake movement based on last known state\n    updateSnakePosition();\n    \n    // Send position update to server if WebSocket is available\n    sendBackgroundUpdate();\n    \n  }, SYNC_INTERVAL);\n}\n\n// Stop background sync\nfunction stopBackgroundSync() {\n  if (backgroundSyncInterval) {\n    console.log('🛑 SW: Stopping background sync interval');\n    clearInterval(backgroundSyncInterval);\n    backgroundSyncInterval = null;\n  }\n}\n\n// Update snake position based on current angle and speed\nfunction updateSnakePosition() {\n  const now = Date.now();\n  const deltaTime = now - gameState.lastUpdate;\n  \n  // Calculate movement based on time elapsed\n  const moveDistance = (gameState.snakeSpeed * deltaTime) / 16.67; // Normalize to 60fps\n  \n  // Update position\n  gameState.snakePosition.x += Math.cos(gameState.snakeAngle) * moveDistance;\n  gameState.snakePosition.y += Math.sin(gameState.snakeAngle) * moveDistance;\n  \n  // Keep within map bounds (2000x2000 map centered at 2000,2000)\n  const MAP_CENTER = 2000;\n  const MAP_RADIUS = 1800;\n  const distFromCenter = Math.sqrt(\n    (gameState.snakePosition.x - MAP_CENTER) ** 2 + \n    (gameState.snakePosition.y - MAP_CENTER) ** 2\n  );\n  \n  if (distFromCenter > MAP_RADIUS) {\n    // Bounce off boundary by reversing direction\n    gameState.snakeAngle += Math.PI;\n    gameState.snakePosition.x = MAP_CENTER + Math.cos(gameState.snakeAngle) * (MAP_RADIUS - 50);\n    gameState.snakePosition.y = MAP_CENTER + Math.sin(gameState.snakeAngle) * (MAP_RADIUS - 50);\n  }\n  \n  gameState.lastUpdate = now;\n}\n\n// Send background position update to server\nfunction sendBackgroundUpdate() {\n  if (!backgroundWS || backgroundWS.readyState !== WebSocket.OPEN) {\n    initBackgroundWebSocket();\n    return;\n  }\n  \n  const updateData = {\n    type: 'backgroundUpdate',\n    playerId: gameState.playerId,\n    position: gameState.snakePosition,\n    angle: gameState.snakeAngle,\n    speed: gameState.snakeSpeed,\n    isBoosting: gameState.isBoosting,\n    timestamp: Date.now()\n  };\n  \n  try {\n    backgroundWS.send(JSON.stringify(updateData));\n  } catch (error) {\n    console.error('🚨 SW: Failed to send background update:', error);\n    closeBackgroundWS();\n  }\n}\n\n// Initialize background WebSocket connection\nfunction initBackgroundWebSocket() {\n  if (!gameState.wsUrl || backgroundWS) return;\n  \n  try {\n    console.log('🔌 SW: Connecting background WebSocket...');\n    backgroundWS = new WebSocket(gameState.wsUrl);\n    \n    backgroundWS.onopen = () => {\n      console.log('✅ SW: Background WebSocket connected');\n    };\n    \n    backgroundWS.onclose = () => {\n      console.log('❌ SW: Background WebSocket disconnected');\n      backgroundWS = null;\n    };\n    \n    backgroundWS.onerror = (error) => {\n      console.error('🚨 SW: Background WebSocket error:', error);\n      backgroundWS = null;\n    };\n    \n  } catch (error) {\n    console.error('🚨 SW: Failed to create background WebSocket:', error);\n  }\n}\n\n// Close background WebSocket\nfunction closeBackgroundWS() {\n  if (backgroundWS) {\n    console.log('🔌 SW: Closing background WebSocket');\n    backgroundWS.close();\n    backgroundWS = null;\n  }\n}\n\n// Handle fetch events (for caching if needed)\nself.addEventListener('fetch', event => {\n  // Only handle game-related requests\n  if (event.request.url.includes('/api/') || event.request.url.includes('/ws')) {\n    // Let these pass through for real-time functionality\n    return;\n  }\n});\n\nconsole.log('🔧 Service Worker setup complete');","size_bytes":6341}}}